
freertos_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e4  080046e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046ec  080046ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046ec  080046ec  000146ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080046f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004070  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040e4  200040e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b668  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002428  00000000  00000000  0002b70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b00  00000000  00000000  0002db38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d8  00000000  00000000  0002e638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fbc  00000000  00000000  0002f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c50f  00000000  00000000  00054fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e58a5  00000000  00000000  000614db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146d80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003288  00000000  00000000  00146dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080045cc 	.word	0x080045cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080045cc 	.word	0x080045cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000090 	.word	0x20000090
 80005c4:	200000e4 	.word	0x200000e4

080005c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d013      	beq.n	8000608 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00b      	beq.n	8000608 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005f0:	e000      	b.n	80005f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d0f9      	beq.n	80005f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
     int DataIdx;
     for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e009      	b.n	800063c <_write+0x26>
     {
         ITM_SendChar((*ptr++));
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	1c5a      	adds	r2, r3, #1
 800062c:	60ba      	str	r2, [r7, #8]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ffc9 	bl	80005c8 <ITM_SendChar>
     for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	3301      	adds	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	dbf1      	blt.n	8000628 <_write+0x12>
     }
     return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fb4d 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f81f 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f935 	bl	80008cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000662:	f000 f88b 	bl	800077c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000666:	f000 f8dd 	bl	8000824 <MX_ADC2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <main+0x44>)
 800066c:	1d3c      	adds	r4, r7, #4
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fe6c 	bl	800235e <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <main+0x48>)
 800068a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800068c:	f001 fe60 	bl	8002350 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x40>
 8000692:	bf00      	nop
 8000694:	080045f0 	.word	0x080045f0
 8000698:	20000374 	.word	0x20000374

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fff8 	bl	80036a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <SystemClock_Config+0xd8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <SystemClock_Config+0xd8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xd8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <SystemClock_Config+0xdc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a24      	ldr	r2, [pc, #144]	; (8000778 <SystemClock_Config+0xdc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xdc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000710:	23b4      	movs	r3, #180	; 0xb4
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f9d9 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 f956 	bl	80009dc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000730:	f001 f982 	bl	8001a38 <HAL_PWREx_EnableOverDrive>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800073a:	f000 f94f 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2105      	movs	r1, #5
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fc33 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000768:	f000 f938 	bl	80009dc <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	; 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000790:	4a22      	ldr	r2, [pc, #136]	; (800081c <MX_ADC1_Init+0xa0>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000794:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_ADC1_Init+0x9c>)
 800079e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_ADC1_Init+0xa4>)
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_ADC1_Init+0x9c>)
 80007e0:	f000 fafa 	bl	8000dd8 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007ea:	f000 f8f7 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000800:	f000 fc40 	bl	8001084 <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800080a:	f000 f8e7 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002e4 	.word	0x200002e4
 800081c:	40012000 	.word	0x40012000
 8000820:	0f000001 	.word	0x0f000001

08000824 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MX_ADC2_Init+0xa0>)
 800083a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ADC2_Init+0x9c>)
 800083e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000842:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800084a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_ADC2_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000854:	2200      	movs	r2, #0
 8000856:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_ADC2_Init+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000868:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_ADC2_Init+0xa4>)
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ADC2_Init+0x9c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000874:	2201      	movs	r2, #1
 8000876:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ADC2_Init+0x9c>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000882:	2201      	movs	r2, #1
 8000884:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000886:	480e      	ldr	r0, [pc, #56]	; (80008c0 <MX_ADC2_Init+0x9c>)
 8000888:	f000 faa6 	bl	8000dd8 <HAL_ADC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000892:	f000 f8a3 	bl	80009dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000896:	2302      	movs	r3, #2
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800089a:	2301      	movs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_ADC2_Init+0x9c>)
 80008a8:	f000 fbec 	bl	8001084 <HAL_ADC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80008b2:	f000 f893 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000032c 	.word	0x2000032c
 80008c4:	40012100 	.word	0x40012100
 80008c8:	0f000001 	.word	0x0f000001

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_GPIO_Init+0x80>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_GPIO_Init+0x80>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_GPIO_Init+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_GPIO_Init+0x80>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <MX_GPIO_Init+0x80>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_GPIO_Init+0x80>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x84>)
 8000922:	f001 f86f 	bl	8001a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000926:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x84>)
 8000940:	f000 feb4 	bl	80016ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40021800 	.word	0x40021800

08000954 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t val1=0, val2 = 0, mean=0, tempo, it=30000;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	f247 5330 	movw	r3, #30000	; 0x7530
 800096c:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  tempo = xTaskGetTickCount();
 800096e:	f002 f85b 	bl	8002a28 <xTaskGetTickCount>
 8000972:	60b8      	str	r0, [r7, #8]
	  for(int i=0; i<it; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e016      	b.n	80009a8 <StartDefaultTask+0x54>
		  HAL_ADC_Start(&hadc1);
 800097a:	4815      	ldr	r0, [pc, #84]	; (80009d0 <StartDefaultTask+0x7c>)
 800097c:	f000 fa70 	bl	8000e60 <HAL_ADC_Start>
		  val1 = HAL_ADC_GetValue(&hadc1);
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <StartDefaultTask+0x7c>)
 8000982:	f000 fb72 	bl	800106a <HAL_ADC_GetValue>
 8000986:	61f8      	str	r0, [r7, #28]
		  HAL_ADC_Stop(&hadc1);
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <StartDefaultTask+0x7c>)
 800098a:	f000 fb3b 	bl	8001004 <HAL_ADC_Stop>
		  HAL_ADC_Start(&hadc2);
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <StartDefaultTask+0x80>)
 8000990:	f000 fa66 	bl	8000e60 <HAL_ADC_Start>
		  val2 = HAL_ADC_GetValue(&hadc2);
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <StartDefaultTask+0x80>)
 8000996:	f000 fb68 	bl	800106a <HAL_ADC_GetValue>
 800099a:	61b8      	str	r0, [r7, #24]
		  HAL_ADC_Stop(&hadc2);
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <StartDefaultTask+0x80>)
 800099e:	f000 fb31 	bl	8001004 <HAL_ADC_Stop>
	  for(int i=0; i<it; i++) {
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d8e4      	bhi.n	800097a <StartDefaultTask+0x26>
	  }
	  mean = xTaskGetTickCount()-tempo;
 80009b0:	f002 f83a 	bl	8002a28 <xTaskGetTickCount>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	613b      	str	r3, [r7, #16]
	  printf("val1: %lu, val2: %lu, freq: %lu (khz)", val1, val2, it/mean);
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	69f9      	ldr	r1, [r7, #28]
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <StartDefaultTask+0x84>)
 80009ca:	f002 fe71 	bl	80036b0 <iprintf>
	  tempo = xTaskGetTickCount();
 80009ce:	e7ce      	b.n	800096e <StartDefaultTask+0x1a>
 80009d0:	200002e4 	.word	0x200002e4
 80009d4:	2000032c 	.word	0x2000032c
 80009d8:	0800460c 	.word	0x0800460c

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <HAL_MspInit+0x54>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_MspInit+0x54>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 fe14 	bl	800165a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <HAL_ADC_MspInit+0xd8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d128      	bne.n	8000ab4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	481c      	ldr	r0, [pc, #112]	; (8000b20 <HAL_ADC_MspInit+0xe0>)
 8000aae:	f000 fdfd 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ab2:	e02c      	b.n	8000b0e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	; (8000b24 <HAL_ADC_MspInit+0xe4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d127      	bne.n	8000b0e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_ADC_MspInit+0xdc>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000af6:	2304      	movs	r3, #4
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_ADC_MspInit+0xe0>)
 8000b0a:	f000 fdcf 	bl	80016ac <HAL_GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40012000 	.word	0x40012000
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40012100 	.word	0x40012100

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f91e 	bl	8000d98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b5c:	f002 f95e 	bl	8002e1c <xTaskGetSchedulerState>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d001      	beq.n	8000b6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b66:	f002 fb37 	bl	80031d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e00a      	b.n	8000b96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b80:	f3af 8000 	nop.w
 8000b84:	4601      	mov	r1, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	60ba      	str	r2, [r7, #8]
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697a      	ldr	r2, [r7, #20]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbf0      	blt.n	8000b80 <_read+0x12>
  }

  return len;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_isatty>:

int _isatty(int file)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f002 fd04 	bl	800364c <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20030000 	.word	0x20030000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	20000378 	.word	0x20000378
 8000c78:	200040e8 	.word	0x200040e8

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cca:	f7ff ffd7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f002 fcc3 	bl	8003658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fcbd 	bl	8000650 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ce4:	080046f4 	.word	0x080046f4
  ldr r2, =_sbss
 8000ce8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cec:	200040e4 	.word	0x200040e4

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 fc91 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe5e 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fc9b 	bl	8001692 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 fc71 	bl	800165a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000037c 	.word	0x2000037c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000037c 	.word	0x2000037c

08000dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e033      	b.n	8000e56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d109      	bne.n	8000e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fe22 	bl	8000a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d118      	bne.n	8000e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e1e:	f023 0302 	bic.w	r3, r3, #2
 8000e22:	f043 0202 	orr.w	r2, r3, #2
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fa5c 	bl	80012e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0201 	orr.w	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	; 0x40
 8000e46:	e001      	b.n	8000e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d101      	bne.n	8000e7a <HAL_ADC_Start+0x1a>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e0b2      	b.n	8000fe0 <HAL_ADC_Start+0x180>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d018      	beq.n	8000ec2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea0:	4b52      	ldr	r3, [pc, #328]	; (8000fec <HAL_ADC_Start+0x18c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <HAL_ADC_Start+0x190>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0c9a      	lsrs	r2, r3, #18
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000eb4:	e002      	b.n	8000ebc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f9      	bne.n	8000eb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d17a      	bne.n	8000fc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ed8:	f023 0301 	bic.w	r3, r3, #1
 8000edc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d007      	beq.n	8000f02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000efa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f0e:	d106      	bne.n	8000f1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	f023 0206 	bic.w	r2, r3, #6
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f1c:	e002      	b.n	8000f24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <HAL_ADC_Start+0x194>)
 8000f2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d12a      	bne.n	8000f9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <HAL_ADC_Start+0x198>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d015      	beq.n	8000f7c <HAL_ADC_Start+0x11c>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <HAL_ADC_Start+0x19c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d105      	bne.n	8000f66 <HAL_ADC_Start+0x106>
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_ADC_Start+0x194>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00a      	beq.n	8000f7c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a25      	ldr	r2, [pc, #148]	; (8001000 <HAL_ADC_Start+0x1a0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d136      	bne.n	8000fde <HAL_ADC_Start+0x17e>
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_ADC_Start+0x194>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d130      	bne.n	8000fde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d129      	bne.n	8000fde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	e020      	b.n	8000fde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_ADC_Start+0x198>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d11b      	bne.n	8000fde <HAL_ADC_Start+0x17e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d114      	bne.n	8000fde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	e00b      	b.n	8000fde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	431bde83 	.word	0x431bde83
 8000ff4:	40012300 	.word	0x40012300
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40012100 	.word	0x40012100
 8001000:	40012200 	.word	0x40012200

08001004 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_ADC_Stop+0x16>
 8001016:	2302      	movs	r3, #2
 8001018:	e021      	b.n	800105e <HAL_ADC_Stop+0x5a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f022 0201 	bic.w	r2, r2, #1
 8001030:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	f043 0201 	orr.w	r2, r3, #1
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_ADC_ConfigChannel+0x1c>
 800109c:	2302      	movs	r3, #2
 800109e:	e113      	b.n	80012c8 <HAL_ADC_ConfigChannel+0x244>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	d925      	bls.n	80010fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68d9      	ldr	r1, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	3b1e      	subs	r3, #30
 80010c6:	2207      	movs	r2, #7
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43da      	mvns	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	400a      	ands	r2, r1
 80010d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68d9      	ldr	r1, [r3, #12]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4403      	add	r3, r0
 80010ee:	3b1e      	subs	r3, #30
 80010f0:	409a      	lsls	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	e022      	b.n	8001142 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	2207      	movs	r2, #7
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	400a      	ands	r2, r1
 800111e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	4603      	mov	r3, r0
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4403      	add	r3, r0
 8001138:	409a      	lsls	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d824      	bhi.n	8001194 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b05      	subs	r3, #5
 800115c:	221f      	movs	r2, #31
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b05      	subs	r3, #5
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	e04c      	b.n	800122e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b0c      	cmp	r3, #12
 800119a:	d824      	bhi.n	80011e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b23      	subs	r3, #35	; 0x23
 80011ae:	221f      	movs	r2, #31
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43da      	mvns	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	400a      	ands	r2, r1
 80011bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3b23      	subs	r3, #35	; 0x23
 80011d8:	fa00 f203 	lsl.w	r2, r0, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	631a      	str	r2, [r3, #48]	; 0x30
 80011e4:	e023      	b.n	800122e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b41      	subs	r3, #65	; 0x41
 80011f8:	221f      	movs	r2, #31
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b41      	subs	r3, #65	; 0x41
 8001222:	fa00 f203 	lsl.w	r2, r0, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_ADC_ConfigChannel+0x250>)
 8001230:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <HAL_ADC_ConfigChannel+0x254>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d10f      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1d8>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b12      	cmp	r3, #18
 8001242:	d10b      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <HAL_ADC_ConfigChannel+0x254>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12b      	bne.n	80012be <HAL_ADC_ConfigChannel+0x23a>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_ADC_ConfigChannel+0x258>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d003      	beq.n	8001278 <HAL_ADC_ConfigChannel+0x1f4>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b11      	cmp	r3, #17
 8001276:	d122      	bne.n	80012be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_ADC_ConfigChannel+0x258>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d111      	bne.n	80012be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_ADC_ConfigChannel+0x25c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <HAL_ADC_ConfigChannel+0x260>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	0c9a      	lsrs	r2, r3, #18
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b0:	e002      	b.n	80012b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40012300 	.word	0x40012300
 80012d8:	40012000 	.word	0x40012000
 80012dc:	10000012 	.word	0x10000012
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f0:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <ADC_Init+0x1f0>)
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800131c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	021a      	lsls	r2, r3, #8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	4a58      	ldr	r2, [pc, #352]	; (80014dc <ADC_Init+0x1f4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800138e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6899      	ldr	r1, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e00f      	b.n	80013e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0202 	bic.w	r2, r2, #2
 80013f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6899      	ldr	r1, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
 8001400:	005a      	lsls	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01b      	beq.n	800144c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001422:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6859      	ldr	r1, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	3b01      	subs	r3, #1
 8001440:	035a      	lsls	r2, r3, #13
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	e007      	b.n	800145c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	3b01      	subs	r3, #1
 8001478:	051a      	lsls	r2, r3, #20
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6899      	ldr	r1, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149e:	025a      	lsls	r2, r3, #9
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6899      	ldr	r1, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	029a      	lsls	r2, r3, #10
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	609a      	str	r2, [r3, #8]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40012300 	.word	0x40012300
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <__NVIC_SetPriorityGrouping>:
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_SetPriority>:
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff47 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff5c 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffb0 	bl	8001600 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e177      	b.n	80019b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	f040 8166 	bne.w	80019b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d005      	beq.n	80016fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d130      	bne.n	8001760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4013      	ands	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 0201 	and.w	r2, r3, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b03      	cmp	r3, #3
 800176a:	d017      	beq.n	800179c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d123      	bne.n	80017f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	08da      	lsrs	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3208      	adds	r2, #8
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	220f      	movs	r2, #15
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	69b9      	ldr	r1, [r7, #24]
 80017ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0203 	and.w	r2, r3, #3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80c0 	beq.w	80019b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_GPIO_Init+0x324>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_GPIO_Init+0x324>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b63      	ldr	r3, [pc, #396]	; (80019d0 <HAL_GPIO_Init+0x324>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184e:	4a61      	ldr	r2, [pc, #388]	; (80019d4 <HAL_GPIO_Init+0x328>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a58      	ldr	r2, [pc, #352]	; (80019d8 <HAL_GPIO_Init+0x32c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d037      	beq.n	80018ea <HAL_GPIO_Init+0x23e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a57      	ldr	r2, [pc, #348]	; (80019dc <HAL_GPIO_Init+0x330>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d031      	beq.n	80018e6 <HAL_GPIO_Init+0x23a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a56      	ldr	r2, [pc, #344]	; (80019e0 <HAL_GPIO_Init+0x334>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d02b      	beq.n	80018e2 <HAL_GPIO_Init+0x236>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a55      	ldr	r2, [pc, #340]	; (80019e4 <HAL_GPIO_Init+0x338>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d025      	beq.n	80018de <HAL_GPIO_Init+0x232>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a54      	ldr	r2, [pc, #336]	; (80019e8 <HAL_GPIO_Init+0x33c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01f      	beq.n	80018da <HAL_GPIO_Init+0x22e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a53      	ldr	r2, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x340>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d019      	beq.n	80018d6 <HAL_GPIO_Init+0x22a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_GPIO_Init+0x344>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x226>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a51      	ldr	r2, [pc, #324]	; (80019f4 <HAL_GPIO_Init+0x348>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x222>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_GPIO_Init+0x34c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x21e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <HAL_GPIO_Init+0x350>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x21a>
 80018c2:	2309      	movs	r3, #9
 80018c4:	e012      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018c6:	230a      	movs	r3, #10
 80018c8:	e010      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ca:	2308      	movs	r3, #8
 80018cc:	e00e      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e00c      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018d2:	2306      	movs	r3, #6
 80018d4:	e00a      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e008      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018da:	2304      	movs	r3, #4
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018de:	2303      	movs	r3, #3
 80018e0:	e004      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e002      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x240>
 80018ea:	2300      	movs	r3, #0
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	f002 0203 	and.w	r2, r2, #3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fc:	4935      	ldr	r1, [pc, #212]	; (80019d4 <HAL_GPIO_Init+0x328>)
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192e:	4a34      	ldr	r2, [pc, #208]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001958:	4a29      	ldr	r2, [pc, #164]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_GPIO_Init+0x354>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_GPIO_Init+0x354>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <HAL_GPIO_Init+0x354>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	f67f ae84 	bls.w	80016c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40013800 	.word	0x40013800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40021400 	.word	0x40021400
 80019f0:	40021800 	.word	0x40021800
 80019f4:	40021c00 	.word	0x40021c00
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40022400 	.word	0x40022400
 8001a00:	40013c00 	.word	0x40013c00

08001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
 8001a10:	4613      	mov	r3, r2
 8001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a14:	787b      	ldrb	r3, [r7, #1]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a1a:	887a      	ldrh	r2, [r7, #2]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a20:	e003      	b.n	8001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	041a      	lsls	r2, r3, #16
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_PWREx_EnableOverDrive+0x94>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7ff f9ac 	bl	8000dc0 <HAL_GetTick>
 8001a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a6a:	e009      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9a8 	bl	8000dc0 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7a:	d901      	bls.n	8001a80 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e01f      	b.n	8001ac0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff f994 	bl	8000dc0 <HAL_GetTick>
 8001a98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a9a:	e009      	b.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a9c:	f7ff f990 	bl	8000dc0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aaa:	d901      	bls.n	8001ab0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e007      	b.n	8001ac0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001abc:	d1ee      	bne.n	8001a9c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	420e0040 	.word	0x420e0040
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	420e0044 	.word	0x420e0044

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e267      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d075      	beq.n	8001be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001af6:	4b88      	ldr	r3, [pc, #544]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d00c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b85      	ldr	r3, [pc, #532]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b82      	ldr	r3, [pc, #520]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	4b7e      	ldr	r3, [pc, #504]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x108>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d157      	bne.n	8001be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e242      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_OscConfig+0x74>
 8001b3e:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b70      	ldr	r3, [pc, #448]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6f      	ldr	r2, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b70:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f916 	bl	8000dc0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff f912 	bl	8000dc0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e207      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f902 	bl	8000dc0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f8fe 	bl	8000dc0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1f3      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b51      	ldr	r3, [pc, #324]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xe8>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bee:	4b4a      	ldr	r3, [pc, #296]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b44      	ldr	r3, [pc, #272]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c7      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4937      	ldr	r1, [pc, #220]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f8b7 	bl	8000dc0 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff f8b3 	bl	8000dc0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a8      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4925      	ldr	r1, [pc, #148]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f896 	bl	8000dc0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff f892 	bl	8000dc0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e187      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d036      	beq.n	8001d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d016      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f876 	bl	8000dc0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff f872 	bl	8000dc0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e167      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x200>
 8001cf6:	e01b      	b.n	8001d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff f85f 	bl	8000dc0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	e00e      	b.n	8001d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff f85b 	bl	8000dc0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d907      	bls.n	8001d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e150      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	42470000 	.word	0x42470000
 8001d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ea      	bne.n	8001d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8097 	beq.w	8001e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b81      	ldr	r3, [pc, #516]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b7d      	ldr	r3, [pc, #500]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a7c      	ldr	r2, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b7a      	ldr	r3, [pc, #488]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b77      	ldr	r3, [pc, #476]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b74      	ldr	r3, [pc, #464]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a73      	ldr	r2, [pc, #460]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff f81b 	bl	8000dc0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff f817 	bl	8000dc0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e10c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2ea>
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a63      	ldr	r2, [pc, #396]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x30c>
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a5b      	ldr	r2, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001de4:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d015      	beq.n	8001e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7fe ffdc 	bl	8000dc0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7fe ffd8 	bl	8000dc0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0cb      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0ee      	beq.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7fe ffc6 	bl	8000dc0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7fe ffc2 	bl	8000dc0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0b5      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ee      	bne.n	8001e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a1 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d05c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d141      	bne.n	8001f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff96 	bl	8000dc0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe ff92 	bl	8000dc0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e087      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	019b      	lsls	r3, r3, #6
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe ff6b 	bl	8000dc0 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe ff67 	bl	8000dc0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e05c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x416>
 8001f0c:	e054      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe ff54 	bl	8000dc0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe ff50 	bl	8000dc0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
 8001f3a:	e03d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e038      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4ec>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d121      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d111      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cc      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d90c      	bls.n	8002004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d044      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d119      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d003      	beq.n	8002086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e067      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4934      	ldr	r1, [pc, #208]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fe82 	bl	8000dc0 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fe7e 	bl	8000dc0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d20c      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fde2 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	0800463c 	.word	0x0800463c
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b090      	sub	sp, #64	; 0x40
 800219a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d00d      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	f200 80a1 	bhi.w	8002300 <HAL_RCC_GetSysClockFreq+0x16c>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x34>
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x3a>
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021cc:	e09b      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b53      	ldr	r3, [pc, #332]	; (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 80021d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021d2:	e098      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021de:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d028      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	627a      	str	r2, [r7, #36]	; 0x24
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021fc:	2100      	movs	r1, #0
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 8002200:	fb03 f201 	mul.w	r2, r3, r1
 8002204:	2300      	movs	r3, #0
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	4413      	add	r3, r2
 800220c:	4a43      	ldr	r2, [pc, #268]	; (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 800220e:	fba0 1202 	umull	r1, r2, r0, r2
 8002212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002214:	460a      	mov	r2, r1
 8002216:	62ba      	str	r2, [r7, #40]	; 0x28
 8002218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221a:	4413      	add	r3, r2
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002220:	2200      	movs	r2, #0
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	61fa      	str	r2, [r7, #28]
 8002226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800222e:	f7fe f82f 	bl	8000290 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4613      	mov	r3, r2
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800223a:	e053      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	2200      	movs	r2, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	617a      	str	r2, [r7, #20]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800224e:	f04f 0b00 	mov.w	fp, #0
 8002252:	4652      	mov	r2, sl
 8002254:	465b      	mov	r3, fp
 8002256:	f04f 0000 	mov.w	r0, #0
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002264:	0150      	lsls	r0, r2, #5
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	ebb2 080a 	subs.w	r8, r2, sl
 800226e:	eb63 090b 	sbc.w	r9, r3, fp
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800227e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002286:	ebb2 0408 	subs.w	r4, r2, r8
 800228a:	eb63 0509 	sbc.w	r5, r3, r9
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	00eb      	lsls	r3, r5, #3
 8002298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229c:	00e2      	lsls	r2, r4, #3
 800229e:	4614      	mov	r4, r2
 80022a0:	461d      	mov	r5, r3
 80022a2:	eb14 030a 	adds.w	r3, r4, sl
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	eb45 030b 	adc.w	r3, r5, fp
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ba:	4629      	mov	r1, r5
 80022bc:	028b      	lsls	r3, r1, #10
 80022be:	4621      	mov	r1, r4
 80022c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c4:	4621      	mov	r1, r4
 80022c6:	028a      	lsls	r2, r1, #10
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	2200      	movs	r2, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d8:	f7fd ffda 	bl	8000290 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetSysClockFreq+0x184>)
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002308:	4618      	mov	r0, r3
 800230a:	3740      	adds	r7, #64	; 0x40
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	017d7840 	.word	0x017d7840

08002320 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002332:	2b84      	cmp	r3, #132	; 0x84
 8002334:	d005      	beq.n	8002342 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002336:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	3303      	adds	r3, #3
 8002340:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002354:	f000 fa5e 	bl	8002814 <vTaskStartScheduler>
  
  return osOK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}

0800235e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800235e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002360:	b089      	sub	sp, #36	; 0x24
 8002362:	af04      	add	r7, sp, #16
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <osThreadCreate+0x54>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01c      	beq.n	80023b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685c      	ldr	r4, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681d      	ldr	r5, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691e      	ldr	r6, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ffc8 	bl	8002320 <makeFreeRtosPriority>
 8002390:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800239a:	9202      	str	r2, [sp, #8]
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9100      	str	r1, [sp, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4632      	mov	r2, r6
 80023a4:	4629      	mov	r1, r5
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 f8a0 	bl	80024ec <xTaskCreateStatic>
 80023ac:	4603      	mov	r3, r0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e01c      	b.n	80023ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685c      	ldr	r4, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023be:	b29e      	uxth	r6, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ffaa 	bl	8002320 <makeFreeRtosPriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	9200      	str	r2, [sp, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4632      	mov	r2, r6
 80023da:	4629      	mov	r1, r5
 80023dc:	4620      	mov	r0, r4
 80023de:	f000 f8e2 	bl	80025a6 <xTaskCreate>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80023ec:	68fb      	ldr	r3, [r7, #12]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f103 0208 	add.w	r2, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f04f 32ff 	mov.w	r2, #4294967295
 800240e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0208 	add.w	r2, r3, #8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0208 	add.w	r2, r3, #8
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	601a      	str	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6892      	ldr	r2, [r2, #8]
 80024ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6852      	ldr	r2, [r2, #4]
 80024b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d103      	bne.n	80024cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	1e5a      	subs	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af04      	add	r7, sp, #16
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <xTaskCreateStatic+0x46>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	61fb      	str	r3, [r7, #28]
}
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002532:	2354      	movs	r3, #84	; 0x54
 8002534:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b54      	cmp	r3, #84	; 0x54
 800253a:	d00a      	beq.n	8002552 <xTaskCreateStatic+0x66>
	__asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	61bb      	str	r3, [r7, #24]
}
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002552:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01e      	beq.n	8002598 <xTaskCreateStatic+0xac>
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002568:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	2202      	movs	r2, #2
 800256e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002572:	2300      	movs	r3, #0
 8002574:	9303      	str	r3, [sp, #12]
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f850 	bl	8002630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002592:	f000 f8d5 	bl	8002740 <prvAddNewTaskToReadyList>
 8002596:	e001      	b.n	800259c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800259c:	697b      	ldr	r3, [r7, #20]
	}
 800259e:	4618      	mov	r0, r3
 80025a0:	3728      	adds	r7, #40	; 0x28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08c      	sub	sp, #48	; 0x30
 80025aa:	af04      	add	r7, sp, #16
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fe5c 	bl	8003278 <pvPortMalloc>
 80025c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00e      	beq.n	80025e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025c8:	2054      	movs	r0, #84	; 0x54
 80025ca:	f000 fe55 	bl	8003278 <pvPortMalloc>
 80025ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
 80025dc:	e005      	b.n	80025ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f000 ff16 	bl	8003410 <vPortFree>
 80025e4:	e001      	b.n	80025ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d017      	beq.n	8002620 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9303      	str	r3, [sp, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f80e 	bl	8002630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002614:	69f8      	ldr	r0, [r7, #28]
 8002616:	f000 f893 	bl	8002740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e002      	b.n	8002626 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002626:	69bb      	ldr	r3, [r7, #24]
	}
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002648:	3b01      	subs	r3, #1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	617b      	str	r3, [r7, #20]
}
 8002674:	bf00      	nop
 8002676:	e7fe      	b.n	8002676 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01f      	beq.n	80026be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e012      	b.n	80026aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	3334      	adds	r3, #52	; 0x34
 8002694:	460a      	mov	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	d9e9      	bls.n	8002684 <prvInitialiseNewTask+0x54>
 80026b0:	e000      	b.n	80026b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80026b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026bc:	e003      	b.n	80026c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d901      	bls.n	80026d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026cc:	2306      	movs	r3, #6
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	2200      	movs	r2, #0
 80026e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	3304      	adds	r3, #4
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fea5 	bl	8002436 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	3318      	adds	r3, #24
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fea0 	bl	8002436 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	f1c3 0207 	rsb	r2, r3, #7
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	2200      	movs	r2, #0
 8002710:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	69b8      	ldr	r0, [r7, #24]
 8002720:	f000 fb9a 	bl	8002e58 <pxPortInitialiseStack>
 8002724:	4602      	mov	r2, r0
 8002726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002728:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002748:	f000 fcb4 	bl	80030b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a29      	ldr	r2, [pc, #164]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 8002754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800275e:	4a27      	ldr	r2, [pc, #156]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <prvAddNewTaskToReadyList+0xb8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d110      	bne.n	800278e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800276c:	f000 fa98 	bl	8002ca0 <prvInitialiseTaskLists>
 8002770:	e00d      	b.n	800278e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <prvAddNewTaskToReadyList+0xc0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	429a      	cmp	r2, r3
 8002786:	d802      	bhi.n	800278e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <prvAddNewTaskToReadyList+0xc4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <prvAddNewTaskToReadyList+0xc4>)
 8002796:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	2201      	movs	r2, #1
 800279e:	409a      	lsls	r2, r3
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <prvAddNewTaskToReadyList+0xc8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <prvAddNewTaskToReadyList+0xc8>)
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <prvAddNewTaskToReadyList+0xcc>)
 80027b8:	441a      	add	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f7ff fe45 	bl	8002450 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027c6:	f000 fca5 	bl	8003114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <prvAddNewTaskToReadyList+0xc0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00e      	beq.n	80027f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <prvAddNewTaskToReadyList+0xbc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <prvAddNewTaskToReadyList+0xd0>)
 80027e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000480 	.word	0x20000480
 80027fc:	20000380 	.word	0x20000380
 8002800:	2000048c 	.word	0x2000048c
 8002804:	2000049c 	.word	0x2000049c
 8002808:	20000488 	.word	0x20000488
 800280c:	20000384 	.word	0x20000384
 8002810:	e000ed04 	.word	0xe000ed04

08002814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002822:	463a      	mov	r2, r7
 8002824:	1d39      	adds	r1, r7, #4
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd feb2 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002830:	6839      	ldr	r1, [r7, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	9202      	str	r2, [sp, #8]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2300      	movs	r3, #0
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	460a      	mov	r2, r1
 8002842:	491e      	ldr	r1, [pc, #120]	; (80028bc <vTaskStartScheduler+0xa8>)
 8002844:	481e      	ldr	r0, [pc, #120]	; (80028c0 <vTaskStartScheduler+0xac>)
 8002846:	f7ff fe51 	bl	80024ec <xTaskCreateStatic>
 800284a:	4603      	mov	r3, r0
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <vTaskStartScheduler+0xb0>)
 800284e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <vTaskStartScheduler+0xb0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002858:	2301      	movs	r3, #1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	e001      	b.n	8002862 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d116      	bne.n	8002896 <vTaskStartScheduler+0x82>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	613b      	str	r3, [r7, #16]
}
 800287a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <vTaskStartScheduler+0xb4>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <vTaskStartScheduler+0xb8>)
 8002886:	2201      	movs	r2, #1
 8002888:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800288a:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <vTaskStartScheduler+0xbc>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002890:	f000 fb6e 	bl	8002f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002894:	e00e      	b.n	80028b4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d10a      	bne.n	80028b4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	60fb      	str	r3, [r7, #12]
}
 80028b0:	bf00      	nop
 80028b2:	e7fe      	b.n	80028b2 <vTaskStartScheduler+0x9e>
}
 80028b4:	bf00      	nop
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	08004634 	.word	0x08004634
 80028c0:	08002c71 	.word	0x08002c71
 80028c4:	200004a4 	.word	0x200004a4
 80028c8:	200004a0 	.word	0x200004a0
 80028cc:	2000048c 	.word	0x2000048c
 80028d0:	20000484 	.word	0x20000484

080028d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <vTaskSuspendAll+0x18>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3301      	adds	r3, #1
 80028de:	4a03      	ldr	r2, [pc, #12]	; (80028ec <vTaskSuspendAll+0x18>)
 80028e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	200004a8 	.word	0x200004a8

080028f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <xTaskResumeAll+0x114>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <xTaskResumeAll+0x2c>
	__asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	603b      	str	r3, [r7, #0]
}
 8002918:	bf00      	nop
 800291a:	e7fe      	b.n	800291a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800291c:	f000 fbca 	bl	80030b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <xTaskResumeAll+0x114>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a37      	ldr	r2, [pc, #220]	; (8002a04 <xTaskResumeAll+0x114>)
 8002928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <xTaskResumeAll+0x114>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d161      	bne.n	80029f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002932:	4b35      	ldr	r3, [pc, #212]	; (8002a08 <xTaskResumeAll+0x118>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d05d      	beq.n	80029f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800293a:	e02e      	b.n	800299a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <xTaskResumeAll+0x11c>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3318      	adds	r3, #24
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fda5 	bl	8002498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3304      	adds	r3, #4
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fda0 	bl	8002498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <xTaskResumeAll+0x120>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4313      	orrs	r3, r2
 8002966:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <xTaskResumeAll+0x120>)
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <xTaskResumeAll+0x124>)
 8002978:	441a      	add	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3304      	adds	r3, #4
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7ff fd65 	bl	8002450 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <xTaskResumeAll+0x128>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	429a      	cmp	r2, r3
 8002992:	d302      	bcc.n	800299a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <xTaskResumeAll+0x12c>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800299a:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <xTaskResumeAll+0x11c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1cc      	bne.n	800293c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029a8:	f000 fa18 	bl	8002ddc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <xTaskResumeAll+0x130>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029b8:	f000 f846 	bl	8002a48 <xTaskIncrementTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <xTaskResumeAll+0x12c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f1      	bne.n	80029b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <xTaskResumeAll+0x130>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <xTaskResumeAll+0x12c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029e2:	2301      	movs	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <xTaskResumeAll+0x134>)
 80029e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029f6:	f000 fb8d 	bl	8003114 <vPortExitCritical>

	return xAlreadyYielded;
 80029fa:	68bb      	ldr	r3, [r7, #8]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	200004a8 	.word	0x200004a8
 8002a08:	20000480 	.word	0x20000480
 8002a0c:	20000440 	.word	0x20000440
 8002a10:	20000488 	.word	0x20000488
 8002a14:	20000384 	.word	0x20000384
 8002a18:	20000380 	.word	0x20000380
 8002a1c:	20000494 	.word	0x20000494
 8002a20:	20000490 	.word	0x20000490
 8002a24:	e000ed04 	.word	0xe000ed04

08002a28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <xTaskGetTickCount+0x1c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a34:	687b      	ldr	r3, [r7, #4]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000484 	.word	0x20000484

08002a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a52:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <xTaskIncrementTick+0x144>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 808e 	bne.w	8002b78 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a5c:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <xTaskIncrementTick+0x148>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a64:	4a4a      	ldr	r2, [pc, #296]	; (8002b90 <xTaskIncrementTick+0x148>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d120      	bne.n	8002ab2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <xTaskIncrementTick+0x14c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <xTaskIncrementTick+0x48>
	__asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	603b      	str	r3, [r7, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	e7fe      	b.n	8002a8e <xTaskIncrementTick+0x46>
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <xTaskIncrementTick+0x14c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <xTaskIncrementTick+0x150>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <xTaskIncrementTick+0x14c>)
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4a3e      	ldr	r2, [pc, #248]	; (8002b98 <xTaskIncrementTick+0x150>)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	; (8002b9c <xTaskIncrementTick+0x154>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <xTaskIncrementTick+0x154>)
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	f000 f995 	bl	8002ddc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <xTaskIncrementTick+0x158>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d348      	bcc.n	8002b4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002abc:	4b35      	ldr	r3, [pc, #212]	; (8002b94 <xTaskIncrementTick+0x14c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d104      	bne.n	8002ad0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ac6:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <xTaskIncrementTick+0x158>)
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8002acc:	601a      	str	r2, [r3, #0]
					break;
 8002ace:	e03e      	b.n	8002b4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad0:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <xTaskIncrementTick+0x14c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d203      	bcs.n	8002af0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ae8:	4a2d      	ldr	r2, [pc, #180]	; (8002ba0 <xTaskIncrementTick+0x158>)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002aee:	e02e      	b.n	8002b4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fccf 	bl	8002498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	3318      	adds	r3, #24
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fcc6 	bl	8002498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <xTaskIncrementTick+0x15c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <xTaskIncrementTick+0x15c>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <xTaskIncrementTick+0x160>)
 8002b2c:	441a      	add	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7ff fc8b 	bl	8002450 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <xTaskIncrementTick+0x164>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3b9      	bcc.n	8002abc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b4c:	e7b6      	b.n	8002abc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <xTaskIncrementTick+0x164>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	4914      	ldr	r1, [pc, #80]	; (8002ba8 <xTaskIncrementTick+0x160>)
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d901      	bls.n	8002b6a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002b66:	2301      	movs	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <xTaskIncrementTick+0x168>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e004      	b.n	8002b82 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <xTaskIncrementTick+0x16c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <xTaskIncrementTick+0x16c>)
 8002b80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002b82:	697b      	ldr	r3, [r7, #20]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200004a8 	.word	0x200004a8
 8002b90:	20000484 	.word	0x20000484
 8002b94:	20000438 	.word	0x20000438
 8002b98:	2000043c 	.word	0x2000043c
 8002b9c:	20000498 	.word	0x20000498
 8002ba0:	200004a0 	.word	0x200004a0
 8002ba4:	20000488 	.word	0x20000488
 8002ba8:	20000384 	.word	0x20000384
 8002bac:	20000380 	.word	0x20000380
 8002bb0:	20000494 	.word	0x20000494
 8002bb4:	20000490 	.word	0x20000490

08002bb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <vTaskSwitchContext+0xa4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <vTaskSwitchContext+0xa8>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002bcc:	e03f      	b.n	8002c4e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <vTaskSwitchContext+0xa8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd4:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <vTaskSwitchContext+0xac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
 8002be4:	f1c3 031f 	rsb	r3, r3, #31
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	491f      	ldr	r1, [pc, #124]	; (8002c68 <vTaskSwitchContext+0xb0>)
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	607b      	str	r3, [r7, #4]
}
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <vTaskSwitchContext+0x5a>
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <vTaskSwitchContext+0xb0>)
 8002c20:	4413      	add	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	3308      	adds	r3, #8
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d104      	bne.n	8002c44 <vTaskSwitchContext+0x8c>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <vTaskSwitchContext+0xb4>)
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	200004a8 	.word	0x200004a8
 8002c60:	20000494 	.word	0x20000494
 8002c64:	20000488 	.word	0x20000488
 8002c68:	20000384 	.word	0x20000384
 8002c6c:	20000380 	.word	0x20000380

08002c70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c78:	f000 f852 	bl	8002d20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <prvIdleTask+0x28>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d9f9      	bls.n	8002c78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <prvIdleTask+0x2c>)
 8002c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c94:	e7f0      	b.n	8002c78 <prvIdleTask+0x8>
 8002c96:	bf00      	nop
 8002c98:	20000384 	.word	0x20000384
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	e00c      	b.n	8002cc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <prvInitialiseTaskLists+0x60>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fb9b 	bl	80023f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b06      	cmp	r3, #6
 8002cca:	d9ef      	bls.n	8002cac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <prvInitialiseTaskLists+0x64>)
 8002cce:	f7ff fb92 	bl	80023f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <prvInitialiseTaskLists+0x68>)
 8002cd4:	f7ff fb8f 	bl	80023f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <prvInitialiseTaskLists+0x6c>)
 8002cda:	f7ff fb8c 	bl	80023f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cde:	480c      	ldr	r0, [pc, #48]	; (8002d10 <prvInitialiseTaskLists+0x70>)
 8002ce0:	f7ff fb89 	bl	80023f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ce4:	480b      	ldr	r0, [pc, #44]	; (8002d14 <prvInitialiseTaskLists+0x74>)
 8002ce6:	f7ff fb86 	bl	80023f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <prvInitialiseTaskLists+0x78>)
 8002cec:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <prvInitialiseTaskLists+0x64>)
 8002cee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <prvInitialiseTaskLists+0x7c>)
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <prvInitialiseTaskLists+0x68>)
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000384 	.word	0x20000384
 8002d04:	20000410 	.word	0x20000410
 8002d08:	20000424 	.word	0x20000424
 8002d0c:	20000440 	.word	0x20000440
 8002d10:	20000454 	.word	0x20000454
 8002d14:	2000046c 	.word	0x2000046c
 8002d18:	20000438 	.word	0x20000438
 8002d1c:	2000043c 	.word	0x2000043c

08002d20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d26:	e019      	b.n	8002d5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d28:	f000 f9c4 	bl	80030b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <prvCheckTasksWaitingTermination+0x50>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fbad 	bl	8002498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	; (8002d74 <prvCheckTasksWaitingTermination+0x54>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <prvCheckTasksWaitingTermination+0x54>)
 8002d46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <prvCheckTasksWaitingTermination+0x58>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <prvCheckTasksWaitingTermination+0x58>)
 8002d50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d52:	f000 f9df 	bl	8003114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f810 	bl	8002d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <prvCheckTasksWaitingTermination+0x58>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e1      	bne.n	8002d28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d64:	bf00      	nop
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000454 	.word	0x20000454
 8002d74:	20000480 	.word	0x20000480
 8002d78:	20000468 	.word	0x20000468

08002d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d108      	bne.n	8002da0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fb3c 	bl	8003410 <vPortFree>
				vPortFree( pxTCB );
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb39 	bl	8003410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d9e:	e018      	b.n	8002dd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d103      	bne.n	8002db2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fb30 	bl	8003410 <vPortFree>
	}
 8002db0:	e00f      	b.n	8002dd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d00a      	beq.n	8002dd2 <prvDeleteTCB+0x56>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	60fb      	str	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	e7fe      	b.n	8002dd0 <prvDeleteTCB+0x54>
	}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <prvResetNextTaskUnblockTime+0x38>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <prvResetNextTaskUnblockTime+0x3c>)
 8002dee:	f04f 32ff 	mov.w	r2, #4294967295
 8002df2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002df4:	e008      	b.n	8002e08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <prvResetNextTaskUnblockTime+0x38>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4a04      	ldr	r2, [pc, #16]	; (8002e18 <prvResetNextTaskUnblockTime+0x3c>)
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20000438 	.word	0x20000438
 8002e18:	200004a0 	.word	0x200004a0

08002e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <xTaskGetSchedulerState+0x34>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	e008      	b.n	8002e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <xTaskGetSchedulerState+0x38>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d102      	bne.n	8002e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	e001      	b.n	8002e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e42:	687b      	ldr	r3, [r7, #4]
	}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	2000048c 	.word	0x2000048c
 8002e54:	200004a8 	.word	0x200004a8

08002e58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3b04      	subs	r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3b04      	subs	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b04      	subs	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <pxPortInitialiseStack+0x64>)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3b14      	subs	r3, #20
 8002e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3b04      	subs	r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f06f 0202 	mvn.w	r2, #2
 8002ea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b20      	subs	r3, #32
 8002eac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	08002ec1 	.word	0x08002ec1

08002ec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <prvTaskExitError+0x54>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d00a      	beq.n	8002eea <prvTaskExitError+0x2a>
	__asm volatile
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	60fb      	str	r3, [r7, #12]
}
 8002ee6:	bf00      	nop
 8002ee8:	e7fe      	b.n	8002ee8 <prvTaskExitError+0x28>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60bb      	str	r3, [r7, #8]
}
 8002efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002efe:	bf00      	nop
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0fc      	beq.n	8002f00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002f06:	bf00      	nop
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	2000000c 	.word	0x2000000c
	...

08002f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002f20:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <pxCurrentTCBConst2>)
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	6808      	ldr	r0, [r1, #0]
 8002f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2a:	f380 8809 	msr	PSP, r0
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f04f 0000 	mov.w	r0, #0
 8002f36:	f380 8811 	msr	BASEPRI, r0
 8002f3a:	4770      	bx	lr
 8002f3c:	f3af 8000 	nop.w

08002f40 <pxCurrentTCBConst2>:
 8002f40:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop

08002f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <prvPortStartFirstTask+0x24>)
 8002f4a:	6800      	ldr	r0, [r0, #0]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	f380 8808 	msr	MSP, r0
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f380 8814 	msr	CONTROL, r0
 8002f5a:	b662      	cpsie	i
 8002f5c:	b661      	cpsie	f
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	df00      	svc	0
 8002f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002f6a:	bf00      	nop
 8002f6c:	e000ed08 	.word	0xe000ed08

08002f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f76:	4b46      	ldr	r3, [pc, #280]	; (8003090 <xPortStartScheduler+0x120>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a46      	ldr	r2, [pc, #280]	; (8003094 <xPortStartScheduler+0x124>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10a      	bne.n	8002f96 <xPortStartScheduler+0x26>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	613b      	str	r3, [r7, #16]
}
 8002f92:	bf00      	nop
 8002f94:	e7fe      	b.n	8002f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <xPortStartScheduler+0x120>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <xPortStartScheduler+0x128>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d10a      	bne.n	8002fb6 <xPortStartScheduler+0x46>
	__asm volatile
 8002fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa4:	f383 8811 	msr	BASEPRI, r3
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	60fb      	str	r3, [r7, #12]
}
 8002fb2:	bf00      	nop
 8002fb4:	e7fe      	b.n	8002fb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <xPortStartScheduler+0x12c>)
 8002fb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <xPortStartScheduler+0x130>)
 8002fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fe4:	e009      	b.n	8002ffa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a2d      	ldr	r2, [pc, #180]	; (80030a4 <xPortStartScheduler+0x134>)
 8002fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d0ef      	beq.n	8002fe6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003006:	4b27      	ldr	r3, [pc, #156]	; (80030a4 <xPortStartScheduler+0x134>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f1c3 0307 	rsb	r3, r3, #7
 800300e:	2b04      	cmp	r3, #4
 8003010:	d00a      	beq.n	8003028 <xPortStartScheduler+0xb8>
	__asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60bb      	str	r3, [r7, #8]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <xPortStartScheduler+0x134>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <xPortStartScheduler+0x134>)
 8003030:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003032:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <xPortStartScheduler+0x134>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800303a:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <xPortStartScheduler+0x134>)
 800303c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <xPortStartScheduler+0x138>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <xPortStartScheduler+0x138>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003050:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <xPortStartScheduler+0x138>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <xPortStartScheduler+0x138>)
 8003058:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800305c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800305e:	f000 f8dd 	bl	800321c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003062:	4b12      	ldr	r3, [pc, #72]	; (80030ac <xPortStartScheduler+0x13c>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003068:	f000 f8fc 	bl	8003264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800306c:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <xPortStartScheduler+0x140>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <xPortStartScheduler+0x140>)
 8003072:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003076:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003078:	f7ff ff66 	bl	8002f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800307c:	f7ff fd9c 	bl	8002bb8 <vTaskSwitchContext>
	prvTaskExitError();
 8003080:	f7ff ff1e 	bl	8002ec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00
 8003094:	410fc271 	.word	0x410fc271
 8003098:	410fc270 	.word	0x410fc270
 800309c:	e000e400 	.word	0xe000e400
 80030a0:	200004ac 	.word	0x200004ac
 80030a4:	200004b0 	.word	0x200004b0
 80030a8:	e000ed20 	.word	0xe000ed20
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	e000ef34 	.word	0xe000ef34

080030b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <vPortEnterCritical+0x58>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <vPortEnterCritical+0x58>)
 80030d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <vPortEnterCritical+0x58>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10f      	bne.n	8003100 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortEnterCritical+0x5c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <vPortEnterCritical+0x4c>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	603b      	str	r3, [r7, #0]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vPortEnterCritical+0x4a>
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	2000000c 	.word	0x2000000c
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <vPortExitCritical+0x50>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10a      	bne.n	8003138 <vPortExitCritical+0x24>
	__asm volatile
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	607b      	str	r3, [r7, #4]
}
 8003134:	bf00      	nop
 8003136:	e7fe      	b.n	8003136 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <vPortExitCritical+0x50>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a09      	ldr	r2, [pc, #36]	; (8003164 <vPortExitCritical+0x50>)
 8003140:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <vPortExitCritical+0x50>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <vPortExitCritical+0x42>
 800314a:	2300      	movs	r3, #0
 800314c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003154:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c
	...

08003170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003170:	f3ef 8009 	mrs	r0, PSP
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <pxCurrentTCBConst>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	f01e 0f10 	tst.w	lr, #16
 8003180:	bf08      	it	eq
 8003182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	6010      	str	r0, [r2, #0]
 800318c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003194:	f380 8811 	msr	BASEPRI, r0
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f7ff fd0a 	bl	8002bb8 <vTaskSwitchContext>
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f380 8811 	msr	BASEPRI, r0
 80031ac:	bc09      	pop	{r0, r3}
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	6808      	ldr	r0, [r1, #0]
 80031b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b6:	f01e 0f10 	tst.w	lr, #16
 80031ba:	bf08      	it	eq
 80031bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80031c0:	f380 8809 	msr	PSP, r0
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	f3af 8000 	nop.w

080031d0 <pxCurrentTCBConst>:
 80031d0:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop

080031d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
	__asm volatile
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
}
 80031f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80031f2:	f7ff fc29 	bl	8002a48 <xTaskIncrementTick>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <xPortSysTickHandler+0x40>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f383 8811 	msr	BASEPRI, r3
}
 800320e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <vPortSetupTimerInterrupt+0x38>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <vPortSetupTimerInterrupt+0x3c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <vPortSetupTimerInterrupt+0x40>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	4a09      	ldr	r2, [pc, #36]	; (8003260 <vPortSetupTimerInterrupt+0x44>)
 800323a:	3b01      	subs	r3, #1
 800323c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vPortSetupTimerInterrupt+0x34>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010
 8003254:	e000e018 	.word	0xe000e018
 8003258:	20000000 	.word	0x20000000
 800325c:	10624dd3 	.word	0x10624dd3
 8003260:	e000e014 	.word	0xe000e014

08003264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003274 <vPortEnableVFP+0x10>
 8003268:	6801      	ldr	r1, [r0, #0]
 800326a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800326e:	6001      	str	r1, [r0, #0]
 8003270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003272:	bf00      	nop
 8003274:	e000ed88 	.word	0xe000ed88

08003278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003284:	f7ff fb26 	bl	80028d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003288:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <pvPortMalloc+0x180>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003290:	f000 f920 	bl	80034d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <pvPortMalloc+0x184>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 8093 	bne.w	80033c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01d      	beq.n	80032e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80032a8:	2208      	movs	r2, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d014      	beq.n	80032e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f023 0307 	bic.w	r3, r3, #7
 80032c0:	3308      	adds	r3, #8
 80032c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <pvPortMalloc+0x6c>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	617b      	str	r3, [r7, #20]
}
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d06e      	beq.n	80033c8 <pvPortMalloc+0x150>
 80032ea:	4b45      	ldr	r3, [pc, #276]	; (8003400 <pvPortMalloc+0x188>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d869      	bhi.n	80033c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80032f4:	4b43      	ldr	r3, [pc, #268]	; (8003404 <pvPortMalloc+0x18c>)
 80032f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <pvPortMalloc+0x18c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032fe:	e004      	b.n	800330a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d903      	bls.n	800331c <pvPortMalloc+0xa4>
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f1      	bne.n	8003300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <pvPortMalloc+0x180>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003322:	429a      	cmp	r2, r3
 8003324:	d050      	beq.n	80033c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2208      	movs	r2, #8
 800332c:	4413      	add	r3, r2
 800332e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad2      	subs	r2, r2, r3
 8003340:	2308      	movs	r3, #8
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	429a      	cmp	r2, r3
 8003346:	d91f      	bls.n	8003388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <pvPortMalloc+0xf8>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	613b      	str	r3, [r7, #16]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003382:	69b8      	ldr	r0, [r7, #24]
 8003384:	f000 f908 	bl	8003598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <pvPortMalloc+0x188>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <pvPortMalloc+0x188>)
 8003394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <pvPortMalloc+0x188>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <pvPortMalloc+0x190>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d203      	bcs.n	80033aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <pvPortMalloc+0x188>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <pvPortMalloc+0x190>)
 80033a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <pvPortMalloc+0x184>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <pvPortMalloc+0x194>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3301      	adds	r3, #1
 80033c4:	4a11      	ldr	r2, [pc, #68]	; (800340c <pvPortMalloc+0x194>)
 80033c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80033c8:	f7ff fa92 	bl	80028f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00a      	beq.n	80033ec <pvPortMalloc+0x174>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	60fb      	str	r3, [r7, #12]
}
 80033e8:	bf00      	nop
 80033ea:	e7fe      	b.n	80033ea <pvPortMalloc+0x172>
	return pvReturn;
 80033ec:	69fb      	ldr	r3, [r7, #28]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3728      	adds	r7, #40	; 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200040bc 	.word	0x200040bc
 80033fc:	200040d0 	.word	0x200040d0
 8003400:	200040c0 	.word	0x200040c0
 8003404:	200040b4 	.word	0x200040b4
 8003408:	200040c4 	.word	0x200040c4
 800340c:	200040c8 	.word	0x200040c8

08003410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04d      	beq.n	80034be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003422:	2308      	movs	r3, #8
 8003424:	425b      	negs	r3, r3
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4413      	add	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <vPortFree+0xb8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <vPortFree+0x44>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60fb      	str	r3, [r7, #12]
}
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <vPortFree+0x62>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	60bb      	str	r3, [r7, #8]
}
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <vPortFree+0xb8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01e      	beq.n	80034be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11a      	bne.n	80034be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <vPortFree+0xb8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003498:	f7ff fa1c 	bl	80028d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <vPortFree+0xbc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4413      	add	r3, r2
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <vPortFree+0xbc>)
 80034a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034aa:	6938      	ldr	r0, [r7, #16]
 80034ac:	f000 f874 	bl	8003598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <vPortFree+0xc0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	4a06      	ldr	r2, [pc, #24]	; (80034d0 <vPortFree+0xc0>)
 80034b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80034ba:	f7ff fa19 	bl	80028f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80034be:	bf00      	nop
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200040d0 	.word	0x200040d0
 80034cc:	200040c0 	.word	0x200040c0
 80034d0:	200040cc 	.word	0x200040cc

080034d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80034de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <prvHeapInit+0xac>)
 80034e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3307      	adds	r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0307 	bic.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <prvHeapInit+0xac>)
 8003504:	4413      	add	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <prvHeapInit+0xb0>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <prvHeapInit+0xb0>)
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4413      	add	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003520:	2208      	movs	r2, #8
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <prvHeapInit+0xb4>)
 8003534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <prvHeapInit+0xb4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <prvHeapInit+0xb4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <prvHeapInit+0xb4>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <prvHeapInit+0xb8>)
 8003562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a09      	ldr	r2, [pc, #36]	; (8003590 <prvHeapInit+0xbc>)
 800356a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <prvHeapInit+0xc0>)
 800356e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	200004b4 	.word	0x200004b4
 8003584:	200040b4 	.word	0x200040b4
 8003588:	200040bc 	.word	0x200040bc
 800358c:	200040c4 	.word	0x200040c4
 8003590:	200040c0 	.word	0x200040c0
 8003594:	200040d0 	.word	0x200040d0

08003598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <prvInsertBlockIntoFreeList+0xac>)
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e002      	b.n	80035ac <prvInsertBlockIntoFreeList+0x14>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d8f7      	bhi.n	80035a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	4413      	add	r3, r2
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d108      	bne.n	80035da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	441a      	add	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d118      	bne.n	8003620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b15      	ldr	r3, [pc, #84]	; (8003648 <prvInsertBlockIntoFreeList+0xb0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d00d      	beq.n	8003616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	441a      	add	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e008      	b.n	8003628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <prvInsertBlockIntoFreeList+0xb0>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e003      	b.n	8003628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d002      	beq.n	8003636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	200040b4 	.word	0x200040b4
 8003648:	200040bc 	.word	0x200040bc

0800364c <__errno>:
 800364c:	4b01      	ldr	r3, [pc, #4]	; (8003654 <__errno+0x8>)
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000010 	.word	0x20000010

08003658 <__libc_init_array>:
 8003658:	b570      	push	{r4, r5, r6, lr}
 800365a:	4d0d      	ldr	r5, [pc, #52]	; (8003690 <__libc_init_array+0x38>)
 800365c:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <__libc_init_array+0x3c>)
 800365e:	1b64      	subs	r4, r4, r5
 8003660:	10a4      	asrs	r4, r4, #2
 8003662:	2600      	movs	r6, #0
 8003664:	42a6      	cmp	r6, r4
 8003666:	d109      	bne.n	800367c <__libc_init_array+0x24>
 8003668:	4d0b      	ldr	r5, [pc, #44]	; (8003698 <__libc_init_array+0x40>)
 800366a:	4c0c      	ldr	r4, [pc, #48]	; (800369c <__libc_init_array+0x44>)
 800366c:	f000 ffae 	bl	80045cc <_init>
 8003670:	1b64      	subs	r4, r4, r5
 8003672:	10a4      	asrs	r4, r4, #2
 8003674:	2600      	movs	r6, #0
 8003676:	42a6      	cmp	r6, r4
 8003678:	d105      	bne.n	8003686 <__libc_init_array+0x2e>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003680:	4798      	blx	r3
 8003682:	3601      	adds	r6, #1
 8003684:	e7ee      	b.n	8003664 <__libc_init_array+0xc>
 8003686:	f855 3b04 	ldr.w	r3, [r5], #4
 800368a:	4798      	blx	r3
 800368c:	3601      	adds	r6, #1
 800368e:	e7f2      	b.n	8003676 <__libc_init_array+0x1e>
 8003690:	080046ec 	.word	0x080046ec
 8003694:	080046ec 	.word	0x080046ec
 8003698:	080046ec 	.word	0x080046ec
 800369c:	080046f0 	.word	0x080046f0

080036a0 <memset>:
 80036a0:	4402      	add	r2, r0
 80036a2:	4603      	mov	r3, r0
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d100      	bne.n	80036aa <memset+0xa>
 80036a8:	4770      	bx	lr
 80036aa:	f803 1b01 	strb.w	r1, [r3], #1
 80036ae:	e7f9      	b.n	80036a4 <memset+0x4>

080036b0 <iprintf>:
 80036b0:	b40f      	push	{r0, r1, r2, r3}
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <iprintf+0x2c>)
 80036b4:	b513      	push	{r0, r1, r4, lr}
 80036b6:	681c      	ldr	r4, [r3, #0]
 80036b8:	b124      	cbz	r4, 80036c4 <iprintf+0x14>
 80036ba:	69a3      	ldr	r3, [r4, #24]
 80036bc:	b913      	cbnz	r3, 80036c4 <iprintf+0x14>
 80036be:	4620      	mov	r0, r4
 80036c0:	f000 f866 	bl	8003790 <__sinit>
 80036c4:	ab05      	add	r3, sp, #20
 80036c6:	9a04      	ldr	r2, [sp, #16]
 80036c8:	68a1      	ldr	r1, [r4, #8]
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 f9bd 	bl	8003a4c <_vfiprintf_r>
 80036d2:	b002      	add	sp, #8
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d8:	b004      	add	sp, #16
 80036da:	4770      	bx	lr
 80036dc:	20000010 	.word	0x20000010

080036e0 <std>:
 80036e0:	2300      	movs	r3, #0
 80036e2:	b510      	push	{r4, lr}
 80036e4:	4604      	mov	r4, r0
 80036e6:	e9c0 3300 	strd	r3, r3, [r0]
 80036ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036ee:	6083      	str	r3, [r0, #8]
 80036f0:	8181      	strh	r1, [r0, #12]
 80036f2:	6643      	str	r3, [r0, #100]	; 0x64
 80036f4:	81c2      	strh	r2, [r0, #14]
 80036f6:	6183      	str	r3, [r0, #24]
 80036f8:	4619      	mov	r1, r3
 80036fa:	2208      	movs	r2, #8
 80036fc:	305c      	adds	r0, #92	; 0x5c
 80036fe:	f7ff ffcf 	bl	80036a0 <memset>
 8003702:	4b05      	ldr	r3, [pc, #20]	; (8003718 <std+0x38>)
 8003704:	6263      	str	r3, [r4, #36]	; 0x24
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <std+0x3c>)
 8003708:	62a3      	str	r3, [r4, #40]	; 0x28
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <std+0x40>)
 800370c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <std+0x44>)
 8003710:	6224      	str	r4, [r4, #32]
 8003712:	6323      	str	r3, [r4, #48]	; 0x30
 8003714:	bd10      	pop	{r4, pc}
 8003716:	bf00      	nop
 8003718:	08003ff5 	.word	0x08003ff5
 800371c:	08004017 	.word	0x08004017
 8003720:	0800404f 	.word	0x0800404f
 8003724:	08004073 	.word	0x08004073

08003728 <_cleanup_r>:
 8003728:	4901      	ldr	r1, [pc, #4]	; (8003730 <_cleanup_r+0x8>)
 800372a:	f000 b8af 	b.w	800388c <_fwalk_reent>
 800372e:	bf00      	nop
 8003730:	0800434d 	.word	0x0800434d

08003734 <__sfmoreglue>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	2268      	movs	r2, #104	; 0x68
 8003738:	1e4d      	subs	r5, r1, #1
 800373a:	4355      	muls	r5, r2
 800373c:	460e      	mov	r6, r1
 800373e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003742:	f000 f8e5 	bl	8003910 <_malloc_r>
 8003746:	4604      	mov	r4, r0
 8003748:	b140      	cbz	r0, 800375c <__sfmoreglue+0x28>
 800374a:	2100      	movs	r1, #0
 800374c:	e9c0 1600 	strd	r1, r6, [r0]
 8003750:	300c      	adds	r0, #12
 8003752:	60a0      	str	r0, [r4, #8]
 8003754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003758:	f7ff ffa2 	bl	80036a0 <memset>
 800375c:	4620      	mov	r0, r4
 800375e:	bd70      	pop	{r4, r5, r6, pc}

08003760 <__sfp_lock_acquire>:
 8003760:	4801      	ldr	r0, [pc, #4]	; (8003768 <__sfp_lock_acquire+0x8>)
 8003762:	f000 b8b3 	b.w	80038cc <__retarget_lock_acquire_recursive>
 8003766:	bf00      	nop
 8003768:	200040d5 	.word	0x200040d5

0800376c <__sfp_lock_release>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__sfp_lock_release+0x8>)
 800376e:	f000 b8ae 	b.w	80038ce <__retarget_lock_release_recursive>
 8003772:	bf00      	nop
 8003774:	200040d5 	.word	0x200040d5

08003778 <__sinit_lock_acquire>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__sinit_lock_acquire+0x8>)
 800377a:	f000 b8a7 	b.w	80038cc <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	200040d6 	.word	0x200040d6

08003784 <__sinit_lock_release>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__sinit_lock_release+0x8>)
 8003786:	f000 b8a2 	b.w	80038ce <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	200040d6 	.word	0x200040d6

08003790 <__sinit>:
 8003790:	b510      	push	{r4, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	f7ff fff0 	bl	8003778 <__sinit_lock_acquire>
 8003798:	69a3      	ldr	r3, [r4, #24]
 800379a:	b11b      	cbz	r3, 80037a4 <__sinit+0x14>
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a0:	f7ff bff0 	b.w	8003784 <__sinit_lock_release>
 80037a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037a8:	6523      	str	r3, [r4, #80]	; 0x50
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <__sinit+0x68>)
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <__sinit+0x6c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80037b2:	42a3      	cmp	r3, r4
 80037b4:	bf04      	itt	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	61a3      	streq	r3, [r4, #24]
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 f820 	bl	8003800 <__sfp>
 80037c0:	6060      	str	r0, [r4, #4]
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 f81c 	bl	8003800 <__sfp>
 80037c8:	60a0      	str	r0, [r4, #8]
 80037ca:	4620      	mov	r0, r4
 80037cc:	f000 f818 	bl	8003800 <__sfp>
 80037d0:	2200      	movs	r2, #0
 80037d2:	60e0      	str	r0, [r4, #12]
 80037d4:	2104      	movs	r1, #4
 80037d6:	6860      	ldr	r0, [r4, #4]
 80037d8:	f7ff ff82 	bl	80036e0 <std>
 80037dc:	68a0      	ldr	r0, [r4, #8]
 80037de:	2201      	movs	r2, #1
 80037e0:	2109      	movs	r1, #9
 80037e2:	f7ff ff7d 	bl	80036e0 <std>
 80037e6:	68e0      	ldr	r0, [r4, #12]
 80037e8:	2202      	movs	r2, #2
 80037ea:	2112      	movs	r1, #18
 80037ec:	f7ff ff78 	bl	80036e0 <std>
 80037f0:	2301      	movs	r3, #1
 80037f2:	61a3      	str	r3, [r4, #24]
 80037f4:	e7d2      	b.n	800379c <__sinit+0xc>
 80037f6:	bf00      	nop
 80037f8:	0800464c 	.word	0x0800464c
 80037fc:	08003729 	.word	0x08003729

08003800 <__sfp>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4607      	mov	r7, r0
 8003804:	f7ff ffac 	bl	8003760 <__sfp_lock_acquire>
 8003808:	4b1e      	ldr	r3, [pc, #120]	; (8003884 <__sfp+0x84>)
 800380a:	681e      	ldr	r6, [r3, #0]
 800380c:	69b3      	ldr	r3, [r6, #24]
 800380e:	b913      	cbnz	r3, 8003816 <__sfp+0x16>
 8003810:	4630      	mov	r0, r6
 8003812:	f7ff ffbd 	bl	8003790 <__sinit>
 8003816:	3648      	adds	r6, #72	; 0x48
 8003818:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800381c:	3b01      	subs	r3, #1
 800381e:	d503      	bpl.n	8003828 <__sfp+0x28>
 8003820:	6833      	ldr	r3, [r6, #0]
 8003822:	b30b      	cbz	r3, 8003868 <__sfp+0x68>
 8003824:	6836      	ldr	r6, [r6, #0]
 8003826:	e7f7      	b.n	8003818 <__sfp+0x18>
 8003828:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800382c:	b9d5      	cbnz	r5, 8003864 <__sfp+0x64>
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <__sfp+0x88>)
 8003830:	60e3      	str	r3, [r4, #12]
 8003832:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003836:	6665      	str	r5, [r4, #100]	; 0x64
 8003838:	f000 f847 	bl	80038ca <__retarget_lock_init_recursive>
 800383c:	f7ff ff96 	bl	800376c <__sfp_lock_release>
 8003840:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003844:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003848:	6025      	str	r5, [r4, #0]
 800384a:	61a5      	str	r5, [r4, #24]
 800384c:	2208      	movs	r2, #8
 800384e:	4629      	mov	r1, r5
 8003850:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003854:	f7ff ff24 	bl	80036a0 <memset>
 8003858:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800385c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003860:	4620      	mov	r0, r4
 8003862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003864:	3468      	adds	r4, #104	; 0x68
 8003866:	e7d9      	b.n	800381c <__sfp+0x1c>
 8003868:	2104      	movs	r1, #4
 800386a:	4638      	mov	r0, r7
 800386c:	f7ff ff62 	bl	8003734 <__sfmoreglue>
 8003870:	4604      	mov	r4, r0
 8003872:	6030      	str	r0, [r6, #0]
 8003874:	2800      	cmp	r0, #0
 8003876:	d1d5      	bne.n	8003824 <__sfp+0x24>
 8003878:	f7ff ff78 	bl	800376c <__sfp_lock_release>
 800387c:	230c      	movs	r3, #12
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	e7ee      	b.n	8003860 <__sfp+0x60>
 8003882:	bf00      	nop
 8003884:	0800464c 	.word	0x0800464c
 8003888:	ffff0001 	.word	0xffff0001

0800388c <_fwalk_reent>:
 800388c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003890:	4606      	mov	r6, r0
 8003892:	4688      	mov	r8, r1
 8003894:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003898:	2700      	movs	r7, #0
 800389a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800389e:	f1b9 0901 	subs.w	r9, r9, #1
 80038a2:	d505      	bpl.n	80038b0 <_fwalk_reent+0x24>
 80038a4:	6824      	ldr	r4, [r4, #0]
 80038a6:	2c00      	cmp	r4, #0
 80038a8:	d1f7      	bne.n	800389a <_fwalk_reent+0xe>
 80038aa:	4638      	mov	r0, r7
 80038ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b0:	89ab      	ldrh	r3, [r5, #12]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d907      	bls.n	80038c6 <_fwalk_reent+0x3a>
 80038b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d003      	beq.n	80038c6 <_fwalk_reent+0x3a>
 80038be:	4629      	mov	r1, r5
 80038c0:	4630      	mov	r0, r6
 80038c2:	47c0      	blx	r8
 80038c4:	4307      	orrs	r7, r0
 80038c6:	3568      	adds	r5, #104	; 0x68
 80038c8:	e7e9      	b.n	800389e <_fwalk_reent+0x12>

080038ca <__retarget_lock_init_recursive>:
 80038ca:	4770      	bx	lr

080038cc <__retarget_lock_acquire_recursive>:
 80038cc:	4770      	bx	lr

080038ce <__retarget_lock_release_recursive>:
 80038ce:	4770      	bx	lr

080038d0 <sbrk_aligned>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4e0e      	ldr	r6, [pc, #56]	; (800390c <sbrk_aligned+0x3c>)
 80038d4:	460c      	mov	r4, r1
 80038d6:	6831      	ldr	r1, [r6, #0]
 80038d8:	4605      	mov	r5, r0
 80038da:	b911      	cbnz	r1, 80038e2 <sbrk_aligned+0x12>
 80038dc:	f000 fb7a 	bl	8003fd4 <_sbrk_r>
 80038e0:	6030      	str	r0, [r6, #0]
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 fb75 	bl	8003fd4 <_sbrk_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d00a      	beq.n	8003904 <sbrk_aligned+0x34>
 80038ee:	1cc4      	adds	r4, r0, #3
 80038f0:	f024 0403 	bic.w	r4, r4, #3
 80038f4:	42a0      	cmp	r0, r4
 80038f6:	d007      	beq.n	8003908 <sbrk_aligned+0x38>
 80038f8:	1a21      	subs	r1, r4, r0
 80038fa:	4628      	mov	r0, r5
 80038fc:	f000 fb6a 	bl	8003fd4 <_sbrk_r>
 8003900:	3001      	adds	r0, #1
 8003902:	d101      	bne.n	8003908 <sbrk_aligned+0x38>
 8003904:	f04f 34ff 	mov.w	r4, #4294967295
 8003908:	4620      	mov	r0, r4
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	200040dc 	.word	0x200040dc

08003910 <_malloc_r>:
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	1ccd      	adds	r5, r1, #3
 8003916:	f025 0503 	bic.w	r5, r5, #3
 800391a:	3508      	adds	r5, #8
 800391c:	2d0c      	cmp	r5, #12
 800391e:	bf38      	it	cc
 8003920:	250c      	movcc	r5, #12
 8003922:	2d00      	cmp	r5, #0
 8003924:	4607      	mov	r7, r0
 8003926:	db01      	blt.n	800392c <_malloc_r+0x1c>
 8003928:	42a9      	cmp	r1, r5
 800392a:	d905      	bls.n	8003938 <_malloc_r+0x28>
 800392c:	230c      	movs	r3, #12
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	2600      	movs	r6, #0
 8003932:	4630      	mov	r0, r6
 8003934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003938:	4e2e      	ldr	r6, [pc, #184]	; (80039f4 <_malloc_r+0xe4>)
 800393a:	f000 fdbb 	bl	80044b4 <__malloc_lock>
 800393e:	6833      	ldr	r3, [r6, #0]
 8003940:	461c      	mov	r4, r3
 8003942:	bb34      	cbnz	r4, 8003992 <_malloc_r+0x82>
 8003944:	4629      	mov	r1, r5
 8003946:	4638      	mov	r0, r7
 8003948:	f7ff ffc2 	bl	80038d0 <sbrk_aligned>
 800394c:	1c43      	adds	r3, r0, #1
 800394e:	4604      	mov	r4, r0
 8003950:	d14d      	bne.n	80039ee <_malloc_r+0xde>
 8003952:	6834      	ldr	r4, [r6, #0]
 8003954:	4626      	mov	r6, r4
 8003956:	2e00      	cmp	r6, #0
 8003958:	d140      	bne.n	80039dc <_malloc_r+0xcc>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	4631      	mov	r1, r6
 800395e:	4638      	mov	r0, r7
 8003960:	eb04 0803 	add.w	r8, r4, r3
 8003964:	f000 fb36 	bl	8003fd4 <_sbrk_r>
 8003968:	4580      	cmp	r8, r0
 800396a:	d13a      	bne.n	80039e2 <_malloc_r+0xd2>
 800396c:	6821      	ldr	r1, [r4, #0]
 800396e:	3503      	adds	r5, #3
 8003970:	1a6d      	subs	r5, r5, r1
 8003972:	f025 0503 	bic.w	r5, r5, #3
 8003976:	3508      	adds	r5, #8
 8003978:	2d0c      	cmp	r5, #12
 800397a:	bf38      	it	cc
 800397c:	250c      	movcc	r5, #12
 800397e:	4629      	mov	r1, r5
 8003980:	4638      	mov	r0, r7
 8003982:	f7ff ffa5 	bl	80038d0 <sbrk_aligned>
 8003986:	3001      	adds	r0, #1
 8003988:	d02b      	beq.n	80039e2 <_malloc_r+0xd2>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	442b      	add	r3, r5
 800398e:	6023      	str	r3, [r4, #0]
 8003990:	e00e      	b.n	80039b0 <_malloc_r+0xa0>
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	1b52      	subs	r2, r2, r5
 8003996:	d41e      	bmi.n	80039d6 <_malloc_r+0xc6>
 8003998:	2a0b      	cmp	r2, #11
 800399a:	d916      	bls.n	80039ca <_malloc_r+0xba>
 800399c:	1961      	adds	r1, r4, r5
 800399e:	42a3      	cmp	r3, r4
 80039a0:	6025      	str	r5, [r4, #0]
 80039a2:	bf18      	it	ne
 80039a4:	6059      	strne	r1, [r3, #4]
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	bf08      	it	eq
 80039aa:	6031      	streq	r1, [r6, #0]
 80039ac:	5162      	str	r2, [r4, r5]
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	4638      	mov	r0, r7
 80039b2:	f104 060b 	add.w	r6, r4, #11
 80039b6:	f000 fd83 	bl	80044c0 <__malloc_unlock>
 80039ba:	f026 0607 	bic.w	r6, r6, #7
 80039be:	1d23      	adds	r3, r4, #4
 80039c0:	1af2      	subs	r2, r6, r3
 80039c2:	d0b6      	beq.n	8003932 <_malloc_r+0x22>
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	50a3      	str	r3, [r4, r2]
 80039c8:	e7b3      	b.n	8003932 <_malloc_r+0x22>
 80039ca:	6862      	ldr	r2, [r4, #4]
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	bf0c      	ite	eq
 80039d0:	6032      	streq	r2, [r6, #0]
 80039d2:	605a      	strne	r2, [r3, #4]
 80039d4:	e7ec      	b.n	80039b0 <_malloc_r+0xa0>
 80039d6:	4623      	mov	r3, r4
 80039d8:	6864      	ldr	r4, [r4, #4]
 80039da:	e7b2      	b.n	8003942 <_malloc_r+0x32>
 80039dc:	4634      	mov	r4, r6
 80039de:	6876      	ldr	r6, [r6, #4]
 80039e0:	e7b9      	b.n	8003956 <_malloc_r+0x46>
 80039e2:	230c      	movs	r3, #12
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4638      	mov	r0, r7
 80039e8:	f000 fd6a 	bl	80044c0 <__malloc_unlock>
 80039ec:	e7a1      	b.n	8003932 <_malloc_r+0x22>
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	e7de      	b.n	80039b0 <_malloc_r+0xa0>
 80039f2:	bf00      	nop
 80039f4:	200040d8 	.word	0x200040d8

080039f8 <__sfputc_r>:
 80039f8:	6893      	ldr	r3, [r2, #8]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	b410      	push	{r4}
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	da08      	bge.n	8003a16 <__sfputc_r+0x1e>
 8003a04:	6994      	ldr	r4, [r2, #24]
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	db01      	blt.n	8003a0e <__sfputc_r+0x16>
 8003a0a:	290a      	cmp	r1, #10
 8003a0c:	d103      	bne.n	8003a16 <__sfputc_r+0x1e>
 8003a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a12:	f000 bb33 	b.w	800407c <__swbuf_r>
 8003a16:	6813      	ldr	r3, [r2, #0]
 8003a18:	1c58      	adds	r0, r3, #1
 8003a1a:	6010      	str	r0, [r2, #0]
 8003a1c:	7019      	strb	r1, [r3, #0]
 8003a1e:	4608      	mov	r0, r1
 8003a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <__sfputs_r>:
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a28:	4606      	mov	r6, r0
 8003a2a:	460f      	mov	r7, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	18d5      	adds	r5, r2, r3
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	d101      	bne.n	8003a38 <__sfputs_r+0x12>
 8003a34:	2000      	movs	r0, #0
 8003a36:	e007      	b.n	8003a48 <__sfputs_r+0x22>
 8003a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a3c:	463a      	mov	r2, r7
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7ff ffda 	bl	80039f8 <__sfputc_r>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d1f3      	bne.n	8003a30 <__sfputs_r+0xa>
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a4c <_vfiprintf_r>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	460d      	mov	r5, r1
 8003a52:	b09d      	sub	sp, #116	; 0x74
 8003a54:	4614      	mov	r4, r2
 8003a56:	4698      	mov	r8, r3
 8003a58:	4606      	mov	r6, r0
 8003a5a:	b118      	cbz	r0, 8003a64 <_vfiprintf_r+0x18>
 8003a5c:	6983      	ldr	r3, [r0, #24]
 8003a5e:	b90b      	cbnz	r3, 8003a64 <_vfiprintf_r+0x18>
 8003a60:	f7ff fe96 	bl	8003790 <__sinit>
 8003a64:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <_vfiprintf_r+0x240>)
 8003a66:	429d      	cmp	r5, r3
 8003a68:	d11b      	bne.n	8003aa2 <_vfiprintf_r+0x56>
 8003a6a:	6875      	ldr	r5, [r6, #4]
 8003a6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a6e:	07d9      	lsls	r1, r3, #31
 8003a70:	d405      	bmi.n	8003a7e <_vfiprintf_r+0x32>
 8003a72:	89ab      	ldrh	r3, [r5, #12]
 8003a74:	059a      	lsls	r2, r3, #22
 8003a76:	d402      	bmi.n	8003a7e <_vfiprintf_r+0x32>
 8003a78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a7a:	f7ff ff27 	bl	80038cc <__retarget_lock_acquire_recursive>
 8003a7e:	89ab      	ldrh	r3, [r5, #12]
 8003a80:	071b      	lsls	r3, r3, #28
 8003a82:	d501      	bpl.n	8003a88 <_vfiprintf_r+0x3c>
 8003a84:	692b      	ldr	r3, [r5, #16]
 8003a86:	b9eb      	cbnz	r3, 8003ac4 <_vfiprintf_r+0x78>
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	f000 fb5a 	bl	8004144 <__swsetup_r>
 8003a90:	b1c0      	cbz	r0, 8003ac4 <_vfiprintf_r+0x78>
 8003a92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a94:	07dc      	lsls	r4, r3, #31
 8003a96:	d50e      	bpl.n	8003ab6 <_vfiprintf_r+0x6a>
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9c:	b01d      	add	sp, #116	; 0x74
 8003a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa2:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <_vfiprintf_r+0x244>)
 8003aa4:	429d      	cmp	r5, r3
 8003aa6:	d101      	bne.n	8003aac <_vfiprintf_r+0x60>
 8003aa8:	68b5      	ldr	r5, [r6, #8]
 8003aaa:	e7df      	b.n	8003a6c <_vfiprintf_r+0x20>
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <_vfiprintf_r+0x248>)
 8003aae:	429d      	cmp	r5, r3
 8003ab0:	bf08      	it	eq
 8003ab2:	68f5      	ldreq	r5, [r6, #12]
 8003ab4:	e7da      	b.n	8003a6c <_vfiprintf_r+0x20>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	0598      	lsls	r0, r3, #22
 8003aba:	d4ed      	bmi.n	8003a98 <_vfiprintf_r+0x4c>
 8003abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003abe:	f7ff ff06 	bl	80038ce <__retarget_lock_release_recursive>
 8003ac2:	e7e9      	b.n	8003a98 <_vfiprintf_r+0x4c>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	2320      	movs	r3, #32
 8003aca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ace:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ad2:	2330      	movs	r3, #48	; 0x30
 8003ad4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c98 <_vfiprintf_r+0x24c>
 8003ad8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003adc:	f04f 0901 	mov.w	r9, #1
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	469a      	mov	sl, r3
 8003ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae8:	b10a      	cbz	r2, 8003aee <_vfiprintf_r+0xa2>
 8003aea:	2a25      	cmp	r2, #37	; 0x25
 8003aec:	d1f9      	bne.n	8003ae2 <_vfiprintf_r+0x96>
 8003aee:	ebba 0b04 	subs.w	fp, sl, r4
 8003af2:	d00b      	beq.n	8003b0c <_vfiprintf_r+0xc0>
 8003af4:	465b      	mov	r3, fp
 8003af6:	4622      	mov	r2, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	4630      	mov	r0, r6
 8003afc:	f7ff ff93 	bl	8003a26 <__sfputs_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	f000 80aa 	beq.w	8003c5a <_vfiprintf_r+0x20e>
 8003b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b08:	445a      	add	r2, fp
 8003b0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a2 	beq.w	8003c5a <_vfiprintf_r+0x20e>
 8003b16:	2300      	movs	r3, #0
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b20:	f10a 0a01 	add.w	sl, sl, #1
 8003b24:	9304      	str	r3, [sp, #16]
 8003b26:	9307      	str	r3, [sp, #28]
 8003b28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b2e:	4654      	mov	r4, sl
 8003b30:	2205      	movs	r2, #5
 8003b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b36:	4858      	ldr	r0, [pc, #352]	; (8003c98 <_vfiprintf_r+0x24c>)
 8003b38:	f7fc fb5a 	bl	80001f0 <memchr>
 8003b3c:	9a04      	ldr	r2, [sp, #16]
 8003b3e:	b9d8      	cbnz	r0, 8003b78 <_vfiprintf_r+0x12c>
 8003b40:	06d1      	lsls	r1, r2, #27
 8003b42:	bf44      	itt	mi
 8003b44:	2320      	movmi	r3, #32
 8003b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b4a:	0713      	lsls	r3, r2, #28
 8003b4c:	bf44      	itt	mi
 8003b4e:	232b      	movmi	r3, #43	; 0x2b
 8003b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b54:	f89a 3000 	ldrb.w	r3, [sl]
 8003b58:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5a:	d015      	beq.n	8003b88 <_vfiprintf_r+0x13c>
 8003b5c:	9a07      	ldr	r2, [sp, #28]
 8003b5e:	4654      	mov	r4, sl
 8003b60:	2000      	movs	r0, #0
 8003b62:	f04f 0c0a 	mov.w	ip, #10
 8003b66:	4621      	mov	r1, r4
 8003b68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b6c:	3b30      	subs	r3, #48	; 0x30
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	d94e      	bls.n	8003c10 <_vfiprintf_r+0x1c4>
 8003b72:	b1b0      	cbz	r0, 8003ba2 <_vfiprintf_r+0x156>
 8003b74:	9207      	str	r2, [sp, #28]
 8003b76:	e014      	b.n	8003ba2 <_vfiprintf_r+0x156>
 8003b78:	eba0 0308 	sub.w	r3, r0, r8
 8003b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003b80:	4313      	orrs	r3, r2
 8003b82:	9304      	str	r3, [sp, #16]
 8003b84:	46a2      	mov	sl, r4
 8003b86:	e7d2      	b.n	8003b2e <_vfiprintf_r+0xe2>
 8003b88:	9b03      	ldr	r3, [sp, #12]
 8003b8a:	1d19      	adds	r1, r3, #4
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	9103      	str	r1, [sp, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bfbb      	ittet	lt
 8003b94:	425b      	neglt	r3, r3
 8003b96:	f042 0202 	orrlt.w	r2, r2, #2
 8003b9a:	9307      	strge	r3, [sp, #28]
 8003b9c:	9307      	strlt	r3, [sp, #28]
 8003b9e:	bfb8      	it	lt
 8003ba0:	9204      	strlt	r2, [sp, #16]
 8003ba2:	7823      	ldrb	r3, [r4, #0]
 8003ba4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ba6:	d10c      	bne.n	8003bc2 <_vfiprintf_r+0x176>
 8003ba8:	7863      	ldrb	r3, [r4, #1]
 8003baa:	2b2a      	cmp	r3, #42	; 0x2a
 8003bac:	d135      	bne.n	8003c1a <_vfiprintf_r+0x1ce>
 8003bae:	9b03      	ldr	r3, [sp, #12]
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bbe:	3402      	adds	r4, #2
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ca8 <_vfiprintf_r+0x25c>
 8003bc6:	7821      	ldrb	r1, [r4, #0]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	4650      	mov	r0, sl
 8003bcc:	f7fc fb10 	bl	80001f0 <memchr>
 8003bd0:	b140      	cbz	r0, 8003be4 <_vfiprintf_r+0x198>
 8003bd2:	2340      	movs	r3, #64	; 0x40
 8003bd4:	eba0 000a 	sub.w	r0, r0, sl
 8003bd8:	fa03 f000 	lsl.w	r0, r3, r0
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	4303      	orrs	r3, r0
 8003be0:	3401      	adds	r4, #1
 8003be2:	9304      	str	r3, [sp, #16]
 8003be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be8:	482c      	ldr	r0, [pc, #176]	; (8003c9c <_vfiprintf_r+0x250>)
 8003bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bee:	2206      	movs	r2, #6
 8003bf0:	f7fc fafe 	bl	80001f0 <memchr>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d03f      	beq.n	8003c78 <_vfiprintf_r+0x22c>
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <_vfiprintf_r+0x254>)
 8003bfa:	bb1b      	cbnz	r3, 8003c44 <_vfiprintf_r+0x1f8>
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	3307      	adds	r3, #7
 8003c00:	f023 0307 	bic.w	r3, r3, #7
 8003c04:	3308      	adds	r3, #8
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0a:	443b      	add	r3, r7
 8003c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c0e:	e767      	b.n	8003ae0 <_vfiprintf_r+0x94>
 8003c10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c14:	460c      	mov	r4, r1
 8003c16:	2001      	movs	r0, #1
 8003c18:	e7a5      	b.n	8003b66 <_vfiprintf_r+0x11a>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	9305      	str	r3, [sp, #20]
 8003c20:	4619      	mov	r1, r3
 8003c22:	f04f 0c0a 	mov.w	ip, #10
 8003c26:	4620      	mov	r0, r4
 8003c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c2c:	3a30      	subs	r2, #48	; 0x30
 8003c2e:	2a09      	cmp	r2, #9
 8003c30:	d903      	bls.n	8003c3a <_vfiprintf_r+0x1ee>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0c5      	beq.n	8003bc2 <_vfiprintf_r+0x176>
 8003c36:	9105      	str	r1, [sp, #20]
 8003c38:	e7c3      	b.n	8003bc2 <_vfiprintf_r+0x176>
 8003c3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2301      	movs	r3, #1
 8003c42:	e7f0      	b.n	8003c26 <_vfiprintf_r+0x1da>
 8003c44:	ab03      	add	r3, sp, #12
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4b16      	ldr	r3, [pc, #88]	; (8003ca4 <_vfiprintf_r+0x258>)
 8003c4c:	a904      	add	r1, sp, #16
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f3af 8000 	nop.w
 8003c54:	4607      	mov	r7, r0
 8003c56:	1c78      	adds	r0, r7, #1
 8003c58:	d1d6      	bne.n	8003c08 <_vfiprintf_r+0x1bc>
 8003c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c5c:	07d9      	lsls	r1, r3, #31
 8003c5e:	d405      	bmi.n	8003c6c <_vfiprintf_r+0x220>
 8003c60:	89ab      	ldrh	r3, [r5, #12]
 8003c62:	059a      	lsls	r2, r3, #22
 8003c64:	d402      	bmi.n	8003c6c <_vfiprintf_r+0x220>
 8003c66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c68:	f7ff fe31 	bl	80038ce <__retarget_lock_release_recursive>
 8003c6c:	89ab      	ldrh	r3, [r5, #12]
 8003c6e:	065b      	lsls	r3, r3, #25
 8003c70:	f53f af12 	bmi.w	8003a98 <_vfiprintf_r+0x4c>
 8003c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c76:	e711      	b.n	8003a9c <_vfiprintf_r+0x50>
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <_vfiprintf_r+0x258>)
 8003c80:	a904      	add	r1, sp, #16
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f880 	bl	8003d88 <_printf_i>
 8003c88:	e7e4      	b.n	8003c54 <_vfiprintf_r+0x208>
 8003c8a:	bf00      	nop
 8003c8c:	08004670 	.word	0x08004670
 8003c90:	08004690 	.word	0x08004690
 8003c94:	08004650 	.word	0x08004650
 8003c98:	080046b0 	.word	0x080046b0
 8003c9c:	080046ba 	.word	0x080046ba
 8003ca0:	00000000 	.word	0x00000000
 8003ca4:	08003a27 	.word	0x08003a27
 8003ca8:	080046b6 	.word	0x080046b6

08003cac <_printf_common>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	688a      	ldr	r2, [r1, #8]
 8003cb6:	690b      	ldr	r3, [r1, #16]
 8003cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bfb8      	it	lt
 8003cc0:	4613      	movlt	r3, r2
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cc8:	4607      	mov	r7, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b10a      	cbz	r2, 8003cd2 <_printf_common+0x26>
 8003cce:	3301      	adds	r3, #1
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	0699      	lsls	r1, r3, #26
 8003cd6:	bf42      	ittt	mi
 8003cd8:	6833      	ldrmi	r3, [r6, #0]
 8003cda:	3302      	addmi	r3, #2
 8003cdc:	6033      	strmi	r3, [r6, #0]
 8003cde:	6825      	ldr	r5, [r4, #0]
 8003ce0:	f015 0506 	ands.w	r5, r5, #6
 8003ce4:	d106      	bne.n	8003cf4 <_printf_common+0x48>
 8003ce6:	f104 0a19 	add.w	sl, r4, #25
 8003cea:	68e3      	ldr	r3, [r4, #12]
 8003cec:	6832      	ldr	r2, [r6, #0]
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	42ab      	cmp	r3, r5
 8003cf2:	dc26      	bgt.n	8003d42 <_printf_common+0x96>
 8003cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cf8:	1e13      	subs	r3, r2, #0
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	bf18      	it	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	0692      	lsls	r2, r2, #26
 8003d02:	d42b      	bmi.n	8003d5c <_printf_common+0xb0>
 8003d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d08:	4649      	mov	r1, r9
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	47c0      	blx	r8
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d01e      	beq.n	8003d50 <_printf_common+0xa4>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	68e5      	ldr	r5, [r4, #12]
 8003d16:	6832      	ldr	r2, [r6, #0]
 8003d18:	f003 0306 	and.w	r3, r3, #6
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	bf08      	it	eq
 8003d20:	1aad      	subeq	r5, r5, r2
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	6922      	ldr	r2, [r4, #16]
 8003d26:	bf0c      	ite	eq
 8003d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d2c:	2500      	movne	r5, #0
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	bfc4      	itt	gt
 8003d32:	1a9b      	subgt	r3, r3, r2
 8003d34:	18ed      	addgt	r5, r5, r3
 8003d36:	2600      	movs	r6, #0
 8003d38:	341a      	adds	r4, #26
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	d11a      	bne.n	8003d74 <_printf_common+0xc8>
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e008      	b.n	8003d54 <_printf_common+0xa8>
 8003d42:	2301      	movs	r3, #1
 8003d44:	4652      	mov	r2, sl
 8003d46:	4649      	mov	r1, r9
 8003d48:	4638      	mov	r0, r7
 8003d4a:	47c0      	blx	r8
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d103      	bne.n	8003d58 <_printf_common+0xac>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d58:	3501      	adds	r5, #1
 8003d5a:	e7c6      	b.n	8003cea <_printf_common+0x3e>
 8003d5c:	18e1      	adds	r1, r4, r3
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	2030      	movs	r0, #48	; 0x30
 8003d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d66:	4422      	add	r2, r4
 8003d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d70:	3302      	adds	r3, #2
 8003d72:	e7c7      	b.n	8003d04 <_printf_common+0x58>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4622      	mov	r2, r4
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0e6      	beq.n	8003d50 <_printf_common+0xa4>
 8003d82:	3601      	adds	r6, #1
 8003d84:	e7d9      	b.n	8003d3a <_printf_common+0x8e>
	...

08003d88 <_printf_i>:
 8003d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	7e0f      	ldrb	r7, [r1, #24]
 8003d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d90:	2f78      	cmp	r7, #120	; 0x78
 8003d92:	4691      	mov	r9, r2
 8003d94:	4680      	mov	r8, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	469a      	mov	sl, r3
 8003d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d9e:	d807      	bhi.n	8003db0 <_printf_i+0x28>
 8003da0:	2f62      	cmp	r7, #98	; 0x62
 8003da2:	d80a      	bhi.n	8003dba <_printf_i+0x32>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	f000 80d8 	beq.w	8003f5a <_printf_i+0x1d2>
 8003daa:	2f58      	cmp	r7, #88	; 0x58
 8003dac:	f000 80a3 	beq.w	8003ef6 <_printf_i+0x16e>
 8003db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003db8:	e03a      	b.n	8003e30 <_printf_i+0xa8>
 8003dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dbe:	2b15      	cmp	r3, #21
 8003dc0:	d8f6      	bhi.n	8003db0 <_printf_i+0x28>
 8003dc2:	a101      	add	r1, pc, #4	; (adr r1, 8003dc8 <_printf_i+0x40>)
 8003dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e35 	.word	0x08003e35
 8003dd0:	08003db1 	.word	0x08003db1
 8003dd4:	08003db1 	.word	0x08003db1
 8003dd8:	08003db1 	.word	0x08003db1
 8003ddc:	08003db1 	.word	0x08003db1
 8003de0:	08003e35 	.word	0x08003e35
 8003de4:	08003db1 	.word	0x08003db1
 8003de8:	08003db1 	.word	0x08003db1
 8003dec:	08003db1 	.word	0x08003db1
 8003df0:	08003db1 	.word	0x08003db1
 8003df4:	08003f41 	.word	0x08003f41
 8003df8:	08003e65 	.word	0x08003e65
 8003dfc:	08003f23 	.word	0x08003f23
 8003e00:	08003db1 	.word	0x08003db1
 8003e04:	08003db1 	.word	0x08003db1
 8003e08:	08003f63 	.word	0x08003f63
 8003e0c:	08003db1 	.word	0x08003db1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003db1 	.word	0x08003db1
 8003e18:	08003db1 	.word	0x08003db1
 8003e1c:	08003f2b 	.word	0x08003f2b
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	602a      	str	r2, [r5, #0]
 8003e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0a3      	b.n	8003f7c <_printf_i+0x1f4>
 8003e34:	6820      	ldr	r0, [r4, #0]
 8003e36:	6829      	ldr	r1, [r5, #0]
 8003e38:	0606      	lsls	r6, r0, #24
 8003e3a:	f101 0304 	add.w	r3, r1, #4
 8003e3e:	d50a      	bpl.n	8003e56 <_printf_i+0xce>
 8003e40:	680e      	ldr	r6, [r1, #0]
 8003e42:	602b      	str	r3, [r5, #0]
 8003e44:	2e00      	cmp	r6, #0
 8003e46:	da03      	bge.n	8003e50 <_printf_i+0xc8>
 8003e48:	232d      	movs	r3, #45	; 0x2d
 8003e4a:	4276      	negs	r6, r6
 8003e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e50:	485e      	ldr	r0, [pc, #376]	; (8003fcc <_printf_i+0x244>)
 8003e52:	230a      	movs	r3, #10
 8003e54:	e019      	b.n	8003e8a <_printf_i+0x102>
 8003e56:	680e      	ldr	r6, [r1, #0]
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e5e:	bf18      	it	ne
 8003e60:	b236      	sxthne	r6, r6
 8003e62:	e7ef      	b.n	8003e44 <_printf_i+0xbc>
 8003e64:	682b      	ldr	r3, [r5, #0]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	1d19      	adds	r1, r3, #4
 8003e6a:	6029      	str	r1, [r5, #0]
 8003e6c:	0601      	lsls	r1, r0, #24
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0xec>
 8003e70:	681e      	ldr	r6, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0xf2>
 8003e74:	0646      	lsls	r6, r0, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0xe8>
 8003e78:	881e      	ldrh	r6, [r3, #0]
 8003e7a:	4854      	ldr	r0, [pc, #336]	; (8003fcc <_printf_i+0x244>)
 8003e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e7e:	bf0c      	ite	eq
 8003e80:	2308      	moveq	r3, #8
 8003e82:	230a      	movne	r3, #10
 8003e84:	2100      	movs	r1, #0
 8003e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e8a:	6865      	ldr	r5, [r4, #4]
 8003e8c:	60a5      	str	r5, [r4, #8]
 8003e8e:	2d00      	cmp	r5, #0
 8003e90:	bfa2      	ittt	ge
 8003e92:	6821      	ldrge	r1, [r4, #0]
 8003e94:	f021 0104 	bicge.w	r1, r1, #4
 8003e98:	6021      	strge	r1, [r4, #0]
 8003e9a:	b90e      	cbnz	r6, 8003ea0 <_printf_i+0x118>
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	d04d      	beq.n	8003f3c <_printf_i+0x1b4>
 8003ea0:	4615      	mov	r5, r2
 8003ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8003eaa:	5dc7      	ldrb	r7, [r0, r7]
 8003eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003eb0:	4637      	mov	r7, r6
 8003eb2:	42bb      	cmp	r3, r7
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	d9f4      	bls.n	8003ea2 <_printf_i+0x11a>
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10b      	bne.n	8003ed4 <_printf_i+0x14c>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	07de      	lsls	r6, r3, #31
 8003ec0:	d508      	bpl.n	8003ed4 <_printf_i+0x14c>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	6861      	ldr	r1, [r4, #4]
 8003ec6:	4299      	cmp	r1, r3
 8003ec8:	bfde      	ittt	le
 8003eca:	2330      	movle	r3, #48	; 0x30
 8003ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ed4:	1b52      	subs	r2, r2, r5
 8003ed6:	6122      	str	r2, [r4, #16]
 8003ed8:	f8cd a000 	str.w	sl, [sp]
 8003edc:	464b      	mov	r3, r9
 8003ede:	aa03      	add	r2, sp, #12
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	f7ff fee2 	bl	8003cac <_printf_common>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d14c      	bne.n	8003f86 <_printf_i+0x1fe>
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	b004      	add	sp, #16
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	4835      	ldr	r0, [pc, #212]	; (8003fcc <_printf_i+0x244>)
 8003ef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003efc:	6829      	ldr	r1, [r5, #0]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f04:	6029      	str	r1, [r5, #0]
 8003f06:	061d      	lsls	r5, r3, #24
 8003f08:	d514      	bpl.n	8003f34 <_printf_i+0x1ac>
 8003f0a:	07df      	lsls	r7, r3, #31
 8003f0c:	bf44      	itt	mi
 8003f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003f12:	6023      	strmi	r3, [r4, #0]
 8003f14:	b91e      	cbnz	r6, 8003f1e <_printf_i+0x196>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f023 0320 	bic.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	2310      	movs	r3, #16
 8003f20:	e7b0      	b.n	8003e84 <_printf_i+0xfc>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	2378      	movs	r3, #120	; 0x78
 8003f2c:	4828      	ldr	r0, [pc, #160]	; (8003fd0 <_printf_i+0x248>)
 8003f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f32:	e7e3      	b.n	8003efc <_printf_i+0x174>
 8003f34:	0659      	lsls	r1, r3, #25
 8003f36:	bf48      	it	mi
 8003f38:	b2b6      	uxthmi	r6, r6
 8003f3a:	e7e6      	b.n	8003f0a <_printf_i+0x182>
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	e7bb      	b.n	8003eb8 <_printf_i+0x130>
 8003f40:	682b      	ldr	r3, [r5, #0]
 8003f42:	6826      	ldr	r6, [r4, #0]
 8003f44:	6961      	ldr	r1, [r4, #20]
 8003f46:	1d18      	adds	r0, r3, #4
 8003f48:	6028      	str	r0, [r5, #0]
 8003f4a:	0635      	lsls	r5, r6, #24
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	d501      	bpl.n	8003f54 <_printf_i+0x1cc>
 8003f50:	6019      	str	r1, [r3, #0]
 8003f52:	e002      	b.n	8003f5a <_printf_i+0x1d2>
 8003f54:	0670      	lsls	r0, r6, #25
 8003f56:	d5fb      	bpl.n	8003f50 <_printf_i+0x1c8>
 8003f58:	8019      	strh	r1, [r3, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	4615      	mov	r5, r2
 8003f60:	e7ba      	b.n	8003ed8 <_printf_i+0x150>
 8003f62:	682b      	ldr	r3, [r5, #0]
 8003f64:	1d1a      	adds	r2, r3, #4
 8003f66:	602a      	str	r2, [r5, #0]
 8003f68:	681d      	ldr	r5, [r3, #0]
 8003f6a:	6862      	ldr	r2, [r4, #4]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f7fc f93e 	bl	80001f0 <memchr>
 8003f74:	b108      	cbz	r0, 8003f7a <_printf_i+0x1f2>
 8003f76:	1b40      	subs	r0, r0, r5
 8003f78:	6060      	str	r0, [r4, #4]
 8003f7a:	6863      	ldr	r3, [r4, #4]
 8003f7c:	6123      	str	r3, [r4, #16]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f84:	e7a8      	b.n	8003ed8 <_printf_i+0x150>
 8003f86:	6923      	ldr	r3, [r4, #16]
 8003f88:	462a      	mov	r2, r5
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4640      	mov	r0, r8
 8003f8e:	47d0      	blx	sl
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0ab      	beq.n	8003eec <_printf_i+0x164>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	079b      	lsls	r3, r3, #30
 8003f98:	d413      	bmi.n	8003fc2 <_printf_i+0x23a>
 8003f9a:	68e0      	ldr	r0, [r4, #12]
 8003f9c:	9b03      	ldr	r3, [sp, #12]
 8003f9e:	4298      	cmp	r0, r3
 8003fa0:	bfb8      	it	lt
 8003fa2:	4618      	movlt	r0, r3
 8003fa4:	e7a4      	b.n	8003ef0 <_printf_i+0x168>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4632      	mov	r2, r6
 8003faa:	4649      	mov	r1, r9
 8003fac:	4640      	mov	r0, r8
 8003fae:	47d0      	blx	sl
 8003fb0:	3001      	adds	r0, #1
 8003fb2:	d09b      	beq.n	8003eec <_printf_i+0x164>
 8003fb4:	3501      	adds	r5, #1
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	9903      	ldr	r1, [sp, #12]
 8003fba:	1a5b      	subs	r3, r3, r1
 8003fbc:	42ab      	cmp	r3, r5
 8003fbe:	dcf2      	bgt.n	8003fa6 <_printf_i+0x21e>
 8003fc0:	e7eb      	b.n	8003f9a <_printf_i+0x212>
 8003fc2:	2500      	movs	r5, #0
 8003fc4:	f104 0619 	add.w	r6, r4, #25
 8003fc8:	e7f5      	b.n	8003fb6 <_printf_i+0x22e>
 8003fca:	bf00      	nop
 8003fcc:	080046c1 	.word	0x080046c1
 8003fd0:	080046d2 	.word	0x080046d2

08003fd4 <_sbrk_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	4d06      	ldr	r5, [pc, #24]	; (8003ff0 <_sbrk_r+0x1c>)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fc fe16 	bl	8000c10 <_sbrk>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_sbrk_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_sbrk_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	200040e0 	.word	0x200040e0

08003ff4 <__sread>:
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffc:	f000 fab2 	bl	8004564 <_read_r>
 8004000:	2800      	cmp	r0, #0
 8004002:	bfab      	itete	ge
 8004004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004006:	89a3      	ldrhlt	r3, [r4, #12]
 8004008:	181b      	addge	r3, r3, r0
 800400a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800400e:	bfac      	ite	ge
 8004010:	6563      	strge	r3, [r4, #84]	; 0x54
 8004012:	81a3      	strhlt	r3, [r4, #12]
 8004014:	bd10      	pop	{r4, pc}

08004016 <__swrite>:
 8004016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	461f      	mov	r7, r3
 800401c:	898b      	ldrh	r3, [r1, #12]
 800401e:	05db      	lsls	r3, r3, #23
 8004020:	4605      	mov	r5, r0
 8004022:	460c      	mov	r4, r1
 8004024:	4616      	mov	r6, r2
 8004026:	d505      	bpl.n	8004034 <__swrite+0x1e>
 8004028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402c:	2302      	movs	r3, #2
 800402e:	2200      	movs	r2, #0
 8004030:	f000 f9c8 	bl	80043c4 <_lseek_r>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800403a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	4632      	mov	r2, r6
 8004042:	463b      	mov	r3, r7
 8004044:	4628      	mov	r0, r5
 8004046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404a:	f000 b869 	b.w	8004120 <_write_r>

0800404e <__sseek>:
 800404e:	b510      	push	{r4, lr}
 8004050:	460c      	mov	r4, r1
 8004052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004056:	f000 f9b5 	bl	80043c4 <_lseek_r>
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	bf15      	itete	ne
 8004060:	6560      	strne	r0, [r4, #84]	; 0x54
 8004062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800406a:	81a3      	strheq	r3, [r4, #12]
 800406c:	bf18      	it	ne
 800406e:	81a3      	strhne	r3, [r4, #12]
 8004070:	bd10      	pop	{r4, pc}

08004072 <__sclose>:
 8004072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004076:	f000 b8d3 	b.w	8004220 <_close_r>
	...

0800407c <__swbuf_r>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	460e      	mov	r6, r1
 8004080:	4614      	mov	r4, r2
 8004082:	4605      	mov	r5, r0
 8004084:	b118      	cbz	r0, 800408e <__swbuf_r+0x12>
 8004086:	6983      	ldr	r3, [r0, #24]
 8004088:	b90b      	cbnz	r3, 800408e <__swbuf_r+0x12>
 800408a:	f7ff fb81 	bl	8003790 <__sinit>
 800408e:	4b21      	ldr	r3, [pc, #132]	; (8004114 <__swbuf_r+0x98>)
 8004090:	429c      	cmp	r4, r3
 8004092:	d12b      	bne.n	80040ec <__swbuf_r+0x70>
 8004094:	686c      	ldr	r4, [r5, #4]
 8004096:	69a3      	ldr	r3, [r4, #24]
 8004098:	60a3      	str	r3, [r4, #8]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	071a      	lsls	r2, r3, #28
 800409e:	d52f      	bpl.n	8004100 <__swbuf_r+0x84>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	b36b      	cbz	r3, 8004100 <__swbuf_r+0x84>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1ac0      	subs	r0, r0, r3
 80040aa:	6963      	ldr	r3, [r4, #20]
 80040ac:	b2f6      	uxtb	r6, r6
 80040ae:	4283      	cmp	r3, r0
 80040b0:	4637      	mov	r7, r6
 80040b2:	dc04      	bgt.n	80040be <__swbuf_r+0x42>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f948 	bl	800434c <_fflush_r>
 80040bc:	bb30      	cbnz	r0, 800410c <__swbuf_r+0x90>
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60a3      	str	r3, [r4, #8]
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	701e      	strb	r6, [r3, #0]
 80040cc:	6963      	ldr	r3, [r4, #20]
 80040ce:	3001      	adds	r0, #1
 80040d0:	4283      	cmp	r3, r0
 80040d2:	d004      	beq.n	80040de <__swbuf_r+0x62>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d506      	bpl.n	80040e8 <__swbuf_r+0x6c>
 80040da:	2e0a      	cmp	r6, #10
 80040dc:	d104      	bne.n	80040e8 <__swbuf_r+0x6c>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f933 	bl	800434c <_fflush_r>
 80040e6:	b988      	cbnz	r0, 800410c <__swbuf_r+0x90>
 80040e8:	4638      	mov	r0, r7
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <__swbuf_r+0x9c>)
 80040ee:	429c      	cmp	r4, r3
 80040f0:	d101      	bne.n	80040f6 <__swbuf_r+0x7a>
 80040f2:	68ac      	ldr	r4, [r5, #8]
 80040f4:	e7cf      	b.n	8004096 <__swbuf_r+0x1a>
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <__swbuf_r+0xa0>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	bf08      	it	eq
 80040fc:	68ec      	ldreq	r4, [r5, #12]
 80040fe:	e7ca      	b.n	8004096 <__swbuf_r+0x1a>
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f81e 	bl	8004144 <__swsetup_r>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0cb      	beq.n	80040a4 <__swbuf_r+0x28>
 800410c:	f04f 37ff 	mov.w	r7, #4294967295
 8004110:	e7ea      	b.n	80040e8 <__swbuf_r+0x6c>
 8004112:	bf00      	nop
 8004114:	08004670 	.word	0x08004670
 8004118:	08004690 	.word	0x08004690
 800411c:	08004650 	.word	0x08004650

08004120 <_write_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d07      	ldr	r5, [pc, #28]	; (8004140 <_write_r+0x20>)
 8004124:	4604      	mov	r4, r0
 8004126:	4608      	mov	r0, r1
 8004128:	4611      	mov	r1, r2
 800412a:	2200      	movs	r2, #0
 800412c:	602a      	str	r2, [r5, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	f7fc fa71 	bl	8000616 <_write>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_write_r+0x1e>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_write_r+0x1e>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200040e0 	.word	0x200040e0

08004144 <__swsetup_r>:
 8004144:	4b32      	ldr	r3, [pc, #200]	; (8004210 <__swsetup_r+0xcc>)
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	681d      	ldr	r5, [r3, #0]
 800414a:	4606      	mov	r6, r0
 800414c:	460c      	mov	r4, r1
 800414e:	b125      	cbz	r5, 800415a <__swsetup_r+0x16>
 8004150:	69ab      	ldr	r3, [r5, #24]
 8004152:	b913      	cbnz	r3, 800415a <__swsetup_r+0x16>
 8004154:	4628      	mov	r0, r5
 8004156:	f7ff fb1b 	bl	8003790 <__sinit>
 800415a:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <__swsetup_r+0xd0>)
 800415c:	429c      	cmp	r4, r3
 800415e:	d10f      	bne.n	8004180 <__swsetup_r+0x3c>
 8004160:	686c      	ldr	r4, [r5, #4]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004168:	0719      	lsls	r1, r3, #28
 800416a:	d42c      	bmi.n	80041c6 <__swsetup_r+0x82>
 800416c:	06dd      	lsls	r5, r3, #27
 800416e:	d411      	bmi.n	8004194 <__swsetup_r+0x50>
 8004170:	2309      	movs	r3, #9
 8004172:	6033      	str	r3, [r6, #0]
 8004174:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	f04f 30ff 	mov.w	r0, #4294967295
 800417e:	e03e      	b.n	80041fe <__swsetup_r+0xba>
 8004180:	4b25      	ldr	r3, [pc, #148]	; (8004218 <__swsetup_r+0xd4>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d101      	bne.n	800418a <__swsetup_r+0x46>
 8004186:	68ac      	ldr	r4, [r5, #8]
 8004188:	e7eb      	b.n	8004162 <__swsetup_r+0x1e>
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <__swsetup_r+0xd8>)
 800418c:	429c      	cmp	r4, r3
 800418e:	bf08      	it	eq
 8004190:	68ec      	ldreq	r4, [r5, #12]
 8004192:	e7e6      	b.n	8004162 <__swsetup_r+0x1e>
 8004194:	0758      	lsls	r0, r3, #29
 8004196:	d512      	bpl.n	80041be <__swsetup_r+0x7a>
 8004198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800419a:	b141      	cbz	r1, 80041ae <__swsetup_r+0x6a>
 800419c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041a0:	4299      	cmp	r1, r3
 80041a2:	d002      	beq.n	80041aa <__swsetup_r+0x66>
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 f991 	bl	80044cc <_free_r>
 80041aa:	2300      	movs	r3, #0
 80041ac:	6363      	str	r3, [r4, #52]	; 0x34
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041b4:	81a3      	strh	r3, [r4, #12]
 80041b6:	2300      	movs	r3, #0
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f043 0308 	orr.w	r3, r3, #8
 80041c4:	81a3      	strh	r3, [r4, #12]
 80041c6:	6923      	ldr	r3, [r4, #16]
 80041c8:	b94b      	cbnz	r3, 80041de <__swsetup_r+0x9a>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d003      	beq.n	80041de <__swsetup_r+0x9a>
 80041d6:	4621      	mov	r1, r4
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 f92b 	bl	8004434 <__smakebuf_r>
 80041de:	89a0      	ldrh	r0, [r4, #12]
 80041e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041e4:	f010 0301 	ands.w	r3, r0, #1
 80041e8:	d00a      	beq.n	8004200 <__swsetup_r+0xbc>
 80041ea:	2300      	movs	r3, #0
 80041ec:	60a3      	str	r3, [r4, #8]
 80041ee:	6963      	ldr	r3, [r4, #20]
 80041f0:	425b      	negs	r3, r3
 80041f2:	61a3      	str	r3, [r4, #24]
 80041f4:	6923      	ldr	r3, [r4, #16]
 80041f6:	b943      	cbnz	r3, 800420a <__swsetup_r+0xc6>
 80041f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041fc:	d1ba      	bne.n	8004174 <__swsetup_r+0x30>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	0781      	lsls	r1, r0, #30
 8004202:	bf58      	it	pl
 8004204:	6963      	ldrpl	r3, [r4, #20]
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	e7f4      	b.n	80041f4 <__swsetup_r+0xb0>
 800420a:	2000      	movs	r0, #0
 800420c:	e7f7      	b.n	80041fe <__swsetup_r+0xba>
 800420e:	bf00      	nop
 8004210:	20000010 	.word	0x20000010
 8004214:	08004670 	.word	0x08004670
 8004218:	08004690 	.word	0x08004690
 800421c:	08004650 	.word	0x08004650

08004220 <_close_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d06      	ldr	r5, [pc, #24]	; (800423c <_close_r+0x1c>)
 8004224:	2300      	movs	r3, #0
 8004226:	4604      	mov	r4, r0
 8004228:	4608      	mov	r0, r1
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	f7fc fcbc 	bl	8000ba8 <_close>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d102      	bne.n	800423a <_close_r+0x1a>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	b103      	cbz	r3, 800423a <_close_r+0x1a>
 8004238:	6023      	str	r3, [r4, #0]
 800423a:	bd38      	pop	{r3, r4, r5, pc}
 800423c:	200040e0 	.word	0x200040e0

08004240 <__sflush_r>:
 8004240:	898a      	ldrh	r2, [r1, #12]
 8004242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	4605      	mov	r5, r0
 8004248:	0710      	lsls	r0, r2, #28
 800424a:	460c      	mov	r4, r1
 800424c:	d458      	bmi.n	8004300 <__sflush_r+0xc0>
 800424e:	684b      	ldr	r3, [r1, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	dc05      	bgt.n	8004260 <__sflush_r+0x20>
 8004254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	dc02      	bgt.n	8004260 <__sflush_r+0x20>
 800425a:	2000      	movs	r0, #0
 800425c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004262:	2e00      	cmp	r6, #0
 8004264:	d0f9      	beq.n	800425a <__sflush_r+0x1a>
 8004266:	2300      	movs	r3, #0
 8004268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800426c:	682f      	ldr	r7, [r5, #0]
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	d032      	beq.n	80042d8 <__sflush_r+0x98>
 8004272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	075a      	lsls	r2, r3, #29
 8004278:	d505      	bpl.n	8004286 <__sflush_r+0x46>
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	1ac0      	subs	r0, r0, r3
 800427e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004280:	b10b      	cbz	r3, 8004286 <__sflush_r+0x46>
 8004282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004284:	1ac0      	subs	r0, r0, r3
 8004286:	2300      	movs	r3, #0
 8004288:	4602      	mov	r2, r0
 800428a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800428c:	6a21      	ldr	r1, [r4, #32]
 800428e:	4628      	mov	r0, r5
 8004290:	47b0      	blx	r6
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	d106      	bne.n	80042a6 <__sflush_r+0x66>
 8004298:	6829      	ldr	r1, [r5, #0]
 800429a:	291d      	cmp	r1, #29
 800429c:	d82c      	bhi.n	80042f8 <__sflush_r+0xb8>
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <__sflush_r+0x108>)
 80042a0:	40ca      	lsrs	r2, r1
 80042a2:	07d6      	lsls	r6, r2, #31
 80042a4:	d528      	bpl.n	80042f8 <__sflush_r+0xb8>
 80042a6:	2200      	movs	r2, #0
 80042a8:	6062      	str	r2, [r4, #4]
 80042aa:	04d9      	lsls	r1, r3, #19
 80042ac:	6922      	ldr	r2, [r4, #16]
 80042ae:	6022      	str	r2, [r4, #0]
 80042b0:	d504      	bpl.n	80042bc <__sflush_r+0x7c>
 80042b2:	1c42      	adds	r2, r0, #1
 80042b4:	d101      	bne.n	80042ba <__sflush_r+0x7a>
 80042b6:	682b      	ldr	r3, [r5, #0]
 80042b8:	b903      	cbnz	r3, 80042bc <__sflush_r+0x7c>
 80042ba:	6560      	str	r0, [r4, #84]	; 0x54
 80042bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042be:	602f      	str	r7, [r5, #0]
 80042c0:	2900      	cmp	r1, #0
 80042c2:	d0ca      	beq.n	800425a <__sflush_r+0x1a>
 80042c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d002      	beq.n	80042d2 <__sflush_r+0x92>
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f8fd 	bl	80044cc <_free_r>
 80042d2:	2000      	movs	r0, #0
 80042d4:	6360      	str	r0, [r4, #52]	; 0x34
 80042d6:	e7c1      	b.n	800425c <__sflush_r+0x1c>
 80042d8:	6a21      	ldr	r1, [r4, #32]
 80042da:	2301      	movs	r3, #1
 80042dc:	4628      	mov	r0, r5
 80042de:	47b0      	blx	r6
 80042e0:	1c41      	adds	r1, r0, #1
 80042e2:	d1c7      	bne.n	8004274 <__sflush_r+0x34>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0c4      	beq.n	8004274 <__sflush_r+0x34>
 80042ea:	2b1d      	cmp	r3, #29
 80042ec:	d001      	beq.n	80042f2 <__sflush_r+0xb2>
 80042ee:	2b16      	cmp	r3, #22
 80042f0:	d101      	bne.n	80042f6 <__sflush_r+0xb6>
 80042f2:	602f      	str	r7, [r5, #0]
 80042f4:	e7b1      	b.n	800425a <__sflush_r+0x1a>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	e7ad      	b.n	800425c <__sflush_r+0x1c>
 8004300:	690f      	ldr	r7, [r1, #16]
 8004302:	2f00      	cmp	r7, #0
 8004304:	d0a9      	beq.n	800425a <__sflush_r+0x1a>
 8004306:	0793      	lsls	r3, r2, #30
 8004308:	680e      	ldr	r6, [r1, #0]
 800430a:	bf08      	it	eq
 800430c:	694b      	ldreq	r3, [r1, #20]
 800430e:	600f      	str	r7, [r1, #0]
 8004310:	bf18      	it	ne
 8004312:	2300      	movne	r3, #0
 8004314:	eba6 0807 	sub.w	r8, r6, r7
 8004318:	608b      	str	r3, [r1, #8]
 800431a:	f1b8 0f00 	cmp.w	r8, #0
 800431e:	dd9c      	ble.n	800425a <__sflush_r+0x1a>
 8004320:	6a21      	ldr	r1, [r4, #32]
 8004322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004324:	4643      	mov	r3, r8
 8004326:	463a      	mov	r2, r7
 8004328:	4628      	mov	r0, r5
 800432a:	47b0      	blx	r6
 800432c:	2800      	cmp	r0, #0
 800432e:	dc06      	bgt.n	800433e <__sflush_r+0xfe>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	e78e      	b.n	800425c <__sflush_r+0x1c>
 800433e:	4407      	add	r7, r0
 8004340:	eba8 0800 	sub.w	r8, r8, r0
 8004344:	e7e9      	b.n	800431a <__sflush_r+0xda>
 8004346:	bf00      	nop
 8004348:	20400001 	.word	0x20400001

0800434c <_fflush_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4605      	mov	r5, r0
 8004352:	460c      	mov	r4, r1
 8004354:	b913      	cbnz	r3, 800435c <_fflush_r+0x10>
 8004356:	2500      	movs	r5, #0
 8004358:	4628      	mov	r0, r5
 800435a:	bd38      	pop	{r3, r4, r5, pc}
 800435c:	b118      	cbz	r0, 8004366 <_fflush_r+0x1a>
 800435e:	6983      	ldr	r3, [r0, #24]
 8004360:	b90b      	cbnz	r3, 8004366 <_fflush_r+0x1a>
 8004362:	f7ff fa15 	bl	8003790 <__sinit>
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <_fflush_r+0x6c>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d11b      	bne.n	80043a4 <_fflush_r+0x58>
 800436c:	686c      	ldr	r4, [r5, #4]
 800436e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0ef      	beq.n	8004356 <_fflush_r+0xa>
 8004376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004378:	07d0      	lsls	r0, r2, #31
 800437a:	d404      	bmi.n	8004386 <_fflush_r+0x3a>
 800437c:	0599      	lsls	r1, r3, #22
 800437e:	d402      	bmi.n	8004386 <_fflush_r+0x3a>
 8004380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004382:	f7ff faa3 	bl	80038cc <__retarget_lock_acquire_recursive>
 8004386:	4628      	mov	r0, r5
 8004388:	4621      	mov	r1, r4
 800438a:	f7ff ff59 	bl	8004240 <__sflush_r>
 800438e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004390:	07da      	lsls	r2, r3, #31
 8004392:	4605      	mov	r5, r0
 8004394:	d4e0      	bmi.n	8004358 <_fflush_r+0xc>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	059b      	lsls	r3, r3, #22
 800439a:	d4dd      	bmi.n	8004358 <_fflush_r+0xc>
 800439c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439e:	f7ff fa96 	bl	80038ce <__retarget_lock_release_recursive>
 80043a2:	e7d9      	b.n	8004358 <_fflush_r+0xc>
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <_fflush_r+0x70>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	d101      	bne.n	80043ae <_fflush_r+0x62>
 80043aa:	68ac      	ldr	r4, [r5, #8]
 80043ac:	e7df      	b.n	800436e <_fflush_r+0x22>
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <_fflush_r+0x74>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	bf08      	it	eq
 80043b4:	68ec      	ldreq	r4, [r5, #12]
 80043b6:	e7da      	b.n	800436e <_fflush_r+0x22>
 80043b8:	08004670 	.word	0x08004670
 80043bc:	08004690 	.word	0x08004690
 80043c0:	08004650 	.word	0x08004650

080043c4 <_lseek_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d07      	ldr	r5, [pc, #28]	; (80043e4 <_lseek_r+0x20>)
 80043c8:	4604      	mov	r4, r0
 80043ca:	4608      	mov	r0, r1
 80043cc:	4611      	mov	r1, r2
 80043ce:	2200      	movs	r2, #0
 80043d0:	602a      	str	r2, [r5, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7fc fc0f 	bl	8000bf6 <_lseek>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_lseek_r+0x1e>
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_lseek_r+0x1e>
 80043e0:	6023      	str	r3, [r4, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	200040e0 	.word	0x200040e0

080043e8 <__swhatbuf_r>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	460e      	mov	r6, r1
 80043ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f0:	2900      	cmp	r1, #0
 80043f2:	b096      	sub	sp, #88	; 0x58
 80043f4:	4614      	mov	r4, r2
 80043f6:	461d      	mov	r5, r3
 80043f8:	da08      	bge.n	800440c <__swhatbuf_r+0x24>
 80043fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	602a      	str	r2, [r5, #0]
 8004402:	061a      	lsls	r2, r3, #24
 8004404:	d410      	bmi.n	8004428 <__swhatbuf_r+0x40>
 8004406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800440a:	e00e      	b.n	800442a <__swhatbuf_r+0x42>
 800440c:	466a      	mov	r2, sp
 800440e:	f000 f8bb 	bl	8004588 <_fstat_r>
 8004412:	2800      	cmp	r0, #0
 8004414:	dbf1      	blt.n	80043fa <__swhatbuf_r+0x12>
 8004416:	9a01      	ldr	r2, [sp, #4]
 8004418:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800441c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004420:	425a      	negs	r2, r3
 8004422:	415a      	adcs	r2, r3
 8004424:	602a      	str	r2, [r5, #0]
 8004426:	e7ee      	b.n	8004406 <__swhatbuf_r+0x1e>
 8004428:	2340      	movs	r3, #64	; 0x40
 800442a:	2000      	movs	r0, #0
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	b016      	add	sp, #88	; 0x58
 8004430:	bd70      	pop	{r4, r5, r6, pc}
	...

08004434 <__smakebuf_r>:
 8004434:	898b      	ldrh	r3, [r1, #12]
 8004436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004438:	079d      	lsls	r5, r3, #30
 800443a:	4606      	mov	r6, r0
 800443c:	460c      	mov	r4, r1
 800443e:	d507      	bpl.n	8004450 <__smakebuf_r+0x1c>
 8004440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	2301      	movs	r3, #1
 800444a:	6163      	str	r3, [r4, #20]
 800444c:	b002      	add	sp, #8
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	ab01      	add	r3, sp, #4
 8004452:	466a      	mov	r2, sp
 8004454:	f7ff ffc8 	bl	80043e8 <__swhatbuf_r>
 8004458:	9900      	ldr	r1, [sp, #0]
 800445a:	4605      	mov	r5, r0
 800445c:	4630      	mov	r0, r6
 800445e:	f7ff fa57 	bl	8003910 <_malloc_r>
 8004462:	b948      	cbnz	r0, 8004478 <__smakebuf_r+0x44>
 8004464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004468:	059a      	lsls	r2, r3, #22
 800446a:	d4ef      	bmi.n	800444c <__smakebuf_r+0x18>
 800446c:	f023 0303 	bic.w	r3, r3, #3
 8004470:	f043 0302 	orr.w	r3, r3, #2
 8004474:	81a3      	strh	r3, [r4, #12]
 8004476:	e7e3      	b.n	8004440 <__smakebuf_r+0xc>
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <__smakebuf_r+0x7c>)
 800447a:	62b3      	str	r3, [r6, #40]	; 0x28
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	6020      	str	r0, [r4, #0]
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	81a3      	strh	r3, [r4, #12]
 8004486:	9b00      	ldr	r3, [sp, #0]
 8004488:	6163      	str	r3, [r4, #20]
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	6120      	str	r0, [r4, #16]
 800448e:	b15b      	cbz	r3, 80044a8 <__smakebuf_r+0x74>
 8004490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004494:	4630      	mov	r0, r6
 8004496:	f000 f889 	bl	80045ac <_isatty_r>
 800449a:	b128      	cbz	r0, 80044a8 <__smakebuf_r+0x74>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	f023 0303 	bic.w	r3, r3, #3
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	81a3      	strh	r3, [r4, #12]
 80044a8:	89a0      	ldrh	r0, [r4, #12]
 80044aa:	4305      	orrs	r5, r0
 80044ac:	81a5      	strh	r5, [r4, #12]
 80044ae:	e7cd      	b.n	800444c <__smakebuf_r+0x18>
 80044b0:	08003729 	.word	0x08003729

080044b4 <__malloc_lock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <__malloc_lock+0x8>)
 80044b6:	f7ff ba09 	b.w	80038cc <__retarget_lock_acquire_recursive>
 80044ba:	bf00      	nop
 80044bc:	200040d4 	.word	0x200040d4

080044c0 <__malloc_unlock>:
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <__malloc_unlock+0x8>)
 80044c2:	f7ff ba04 	b.w	80038ce <__retarget_lock_release_recursive>
 80044c6:	bf00      	nop
 80044c8:	200040d4 	.word	0x200040d4

080044cc <_free_r>:
 80044cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d044      	beq.n	800455c <_free_r+0x90>
 80044d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d6:	9001      	str	r0, [sp, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f1a1 0404 	sub.w	r4, r1, #4
 80044de:	bfb8      	it	lt
 80044e0:	18e4      	addlt	r4, r4, r3
 80044e2:	f7ff ffe7 	bl	80044b4 <__malloc_lock>
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <_free_r+0x94>)
 80044e8:	9801      	ldr	r0, [sp, #4]
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	b933      	cbnz	r3, 80044fc <_free_r+0x30>
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	6014      	str	r4, [r2, #0]
 80044f2:	b003      	add	sp, #12
 80044f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f8:	f7ff bfe2 	b.w	80044c0 <__malloc_unlock>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d908      	bls.n	8004512 <_free_r+0x46>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf01      	itttt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	1949      	addeq	r1, r1, r5
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	e7ed      	b.n	80044ee <_free_r+0x22>
 8004512:	461a      	mov	r2, r3
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	b10b      	cbz	r3, 800451c <_free_r+0x50>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d9fa      	bls.n	8004512 <_free_r+0x46>
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	1855      	adds	r5, r2, r1
 8004520:	42a5      	cmp	r5, r4
 8004522:	d10b      	bne.n	800453c <_free_r+0x70>
 8004524:	6824      	ldr	r4, [r4, #0]
 8004526:	4421      	add	r1, r4
 8004528:	1854      	adds	r4, r2, r1
 800452a:	42a3      	cmp	r3, r4
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	d1e0      	bne.n	80044f2 <_free_r+0x26>
 8004530:	681c      	ldr	r4, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6053      	str	r3, [r2, #4]
 8004536:	4421      	add	r1, r4
 8004538:	6011      	str	r1, [r2, #0]
 800453a:	e7da      	b.n	80044f2 <_free_r+0x26>
 800453c:	d902      	bls.n	8004544 <_free_r+0x78>
 800453e:	230c      	movs	r3, #12
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	e7d6      	b.n	80044f2 <_free_r+0x26>
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	1961      	adds	r1, r4, r5
 8004548:	428b      	cmp	r3, r1
 800454a:	bf04      	itt	eq
 800454c:	6819      	ldreq	r1, [r3, #0]
 800454e:	685b      	ldreq	r3, [r3, #4]
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	bf04      	itt	eq
 8004554:	1949      	addeq	r1, r1, r5
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	6054      	str	r4, [r2, #4]
 800455a:	e7ca      	b.n	80044f2 <_free_r+0x26>
 800455c:	b003      	add	sp, #12
 800455e:	bd30      	pop	{r4, r5, pc}
 8004560:	200040d8 	.word	0x200040d8

08004564 <_read_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d07      	ldr	r5, [pc, #28]	; (8004584 <_read_r+0x20>)
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	2200      	movs	r2, #0
 8004570:	602a      	str	r2, [r5, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f7fc fafb 	bl	8000b6e <_read>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_read_r+0x1e>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_read_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200040e0 	.word	0x200040e0

08004588 <_fstat_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4d07      	ldr	r5, [pc, #28]	; (80045a8 <_fstat_r+0x20>)
 800458c:	2300      	movs	r3, #0
 800458e:	4604      	mov	r4, r0
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	602b      	str	r3, [r5, #0]
 8004596:	f7fc fb13 	bl	8000bc0 <_fstat>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d102      	bne.n	80045a4 <_fstat_r+0x1c>
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	b103      	cbz	r3, 80045a4 <_fstat_r+0x1c>
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
 80045a6:	bf00      	nop
 80045a8:	200040e0 	.word	0x200040e0

080045ac <_isatty_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4d06      	ldr	r5, [pc, #24]	; (80045c8 <_isatty_r+0x1c>)
 80045b0:	2300      	movs	r3, #0
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	f7fc fb12 	bl	8000be0 <_isatty>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_isatty_r+0x1a>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_isatty_r+0x1a>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200040e0 	.word	0x200040e0

080045cc <_init>:
 80045cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ce:	bf00      	nop
 80045d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d2:	bc08      	pop	{r3}
 80045d4:	469e      	mov	lr, r3
 80045d6:	4770      	bx	lr

080045d8 <_fini>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	bf00      	nop
 80045dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045de:	bc08      	pop	{r3}
 80045e0:	469e      	mov	lr, r3
 80045e2:	4770      	bx	lr
